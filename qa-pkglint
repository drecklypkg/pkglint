#! /bin/sh
set -eu

srcdir="$HOME/pkglint"
archivedir="$srcdir/archive"
pkgsrcdir="$HOME/git/pkgsrc"
: ${GOPATH:="$HOME/go"}

step_msg() {
  printf '%s => %s\n' "$(date +'%H:%M:%S')" "$1"
}

genrunid() {
  if [ -n "${runid-}" ]; then
    return
  fi
  headcommit=$(cd "$srcdir" && git rev-parse --short HEAD)
  if (cd "$srcdir" && git diff --quiet && git diff --cached --quiet); then
    timestamp="$(cd "$srcdir" && git show -s --format=%ai HEAD | awk -F '[- :]' '{print $1$2$3"-"$4$5}')"
    runid="$timestamp-$headcommit"
  else
    runid="$(date +'%Y%m%d-%H%M')-$headcommit-mod-$$"
  fi
}

install() {
  genrunid
  (cd "$srcdir" && chmod 644 *.go)
  step_msg "Formatting pkglint"
  go fmt netbsd.org/pkglint/...
  step_msg "Generating source code"
  go generate netbsd.org/pkglint/...
  step_msg "Testing pkglint"
  go test netbsd.org/pkglint/...
  step_msg "Installing pkglint"
  go install netbsd.org/pkglint/...
  cp "$GOPATH/bin/pkglint.exe" "$archivedir/$runid.exe"
}

install_notest() {
  genrunid
  (cd "$srcdir" && chmod 644 *.go)
  step_msg "Formatting pkglint"
  go fmt netbsd.org/pkglint/...
  step_msg "Generating source code"
  go generate netbsd.org/pkglint/...
  step_msg "Installing pkglint"
  go install netbsd.org/pkglint/...
  cp "$GOPATH/bin/pkglint.exe" "$archivedir/$runid.exe"
}

analyze() {
  step_msg "Analyzing test coverage"
  (
    cd "$srcdir" \
    && tmpfile=$(cygpath -w "/tmp/gocover-$$.html") \
    && go test -coverprofile=coverage.out -covermode=count -timeout 30m -coverpkg ./... ./... \
    && go tool cover -html=coverage.out -o "$tmpfile" \
    && rm coverage.out \
    && cygstart "$tmpfile"
  )

  step_msg "Analyzing code style"
  (cd ~/pkglint && gometalinter --exclude "exported method|unexported|drop this else") | less
}

netbsd() {
  step_msg "Checking for @beta"
  if (cd "$srcdir" && grep -n "@beta" *.go); then
    exit 1
  fi

  step_msg "Copying files to NetBSD VM"
  rsync -a --delete --rsync-path=/home/rillig/pkg/bin/rsync \
    --chmod=F0664 \
    --cvs-exclude \
    --exclude="qa-pkglint" \
    --exclude="*.out" \
    --exclude=".git*" \
    --exclude="/.travis.yml" \
    --exclude="/COPYING" \
    --exclude="/*.md" \
    --exclude="/TODO.txt" \
    --exclude="/archive/" \
    --exclude="/coverage.html" \
    --exclude="/pkglint.cov" \
    --exclude="/pkglint.exe" \
    --exclude="/pkglint.test.exe" \
    --exclude="/shell/" \
    --exclude="*.docx" \
    --exclude="/.idea/" \
    --exclude="/.vscode/" \
    --exclude="*.iml" \
    --exclude="*yacc.go" \
    --exclude="*.log" \
    "$srcdir/" netbsd:proj/pkgsrc/pkgtools/pkglint/files/

  step_msg "Installing NetBSD package"
  cmd=". ./.bash_profile"
  cmd="$cmd && cd proj/pkgsrc/pkgtools/pkglint"
  cmd="$cmd && env - PATH=/bin:/usr/bin PKGSRC_RUN_TEST=no "\$HOME/minipkg/bin/bmake" clean update"
  cmd="$cmd && env - PATH=/bin:/usr/bin PKGSRC_RUN_TEST=yes "\$HOME/minipkg/bin/bmake" clean update"
  cmd="$cmd && "\$HOME/minipkg/bin/pkglint" -Wall"
  ssh netbsd "$cmd"
}

pkgsrc() {
  genrunid
  step_msg "Running pkglint on the pkgsrc tree"
  time (
    cd "$pkgsrcdir" \
    && printf 'pkgsrc HEAD commit: %s\n' "$(git show-ref -s HEAD)" \
    && printf 'pkgsrc-wip HEAD commit: %s\n' "$(git -C wip show-ref -s HEAD)" \
    && printf '\n' \
    && { GODEBUG=gctrace=1 "$archivedir/$runid.exe" -s -pr -Wall -Call . wip 2> "$archivedir/$runid.err" || true; } \
    && cp "pkglint.pprof" "$archivedir/$runid.pprof" \
    && cp "pkglint.heapdump" "$archivedir/$runid.heapdump"
    ) > "$archivedir/$runid.tmp" || true
  mv "$archivedir/$runid.tmp" "$archivedir/$runid.out"
}

diffs() {
  step_msg "Generating diffs"
  (
    cd "$archivedir"
    for out in 20*.out; do
      diff -u *.ref "$out" > "${out%.out}.diff" || true
      perl -e '
        use strict;
        use warnings;

        sub readhisto($) {
          my ($filename) = @_;
          my %histo = ();
          open(my $f, "<", $filename) or die;
          while (defined(my $line = <$f>)) {
            if ($line =~ /^loghisto[\t ]+(\d+)[\t ]+(.*)$/) {
              $histo{$2} = +$1;
            }
          }
          return \%histo;
        }

        my $del = readhisto(shift());
        my $add = readhisto(shift());
        my %all = ();
        foreach my $key (keys %$del) { $all{$key} += $del->{$key}; }
        foreach my $key (keys %$add) { $all{$key} += $add->{$key}; }
        foreach my $key (sort { $all{$b} <=> $all{$a} || $a cmp $b } keys %all) {
          my $ndel = exists($del->{$key}) ? $del->{$key} : 0;
          my $nadd = exists($add->{$key}) ? $add->{$key} : 0;
          if ($ndel != $nadd) {
            printf("%5d   %5d   %+5d   %s\n", $ndel, $nadd, $nadd - $ndel, $key);
          }
        }
        ' *.ref "$out" >> "${out%.out}.diff"
    done
  )
}

case "$*" in
"")
  set -- install pkgsrc diffs
  ;;
"pprof "*)
  cd "$archivedir"
  go tool pprof -http :1$2 *$2*.exe *$2*.pprof &
  exit 0
  ;;
"notest")
  set -- install_notest pkgsrc diffs
  ;;
esac

for cmd in "$@"; do
  "$cmd"
done

step_msg "OK"
