#! /bin/bash
set -eu

srcdir="$HOME/go/src/netbsd.org/pkglint"
archivedir="$srcdir/archive"
pkgsrcdir="$HOME/git/pkgsrc"
: "${GOPATH:="$HOME/go"}"

to_native_path() {
  local cygdir nativedir
  case "$(uname -s)" in
  (CYGWIN*)
    eval "cygdir=\$$1"
    # shellcheck disable=SC2034
    # shellcheck disable=SC2154
    nativedir="$(cygpath -w "$cygdir")"
    eval "$1=\$nativedir"
  esac
}

to_native_path srcdir
to_native_path archivedir
to_native_path pkgsrcdir
to_native_path GOPATH

run_tests=yes

step_msg() {
  printf '%s => %s\n' "$(date +'%H:%M:%S')" "$1"
}

qa_genrunid() {
  if [ -n "${runid-}" ]; then
    return
  fi
  timestamp="$(cd "$srcdir" && git show -s --format=%ai HEAD | awk -F '[- :]' '{print substr($1,3)$2$3"-"$4$5}')"
  headcommit=$(cd "$srcdir" && git rev-parse --short HEAD)
  if (cd "$srcdir" && git diff --quiet && git diff --cached --quiet); then
    runid="$timestamp-$headcommit"
  else
    runid="$timestamp-$headcommit-$(date +'%H%M%S')"
    (cd "$srcdir" && git diff && git diff --cached) > "$archivedir/$runid.patch"
  fi
}

qa_notest() {
  run_tests=no
}

qa_test() {
  qa_genrunid
  (cd "$srcdir" && chmod 644 -- *.go)
  step_msg "Formatting pkglint"
  go fmt netbsd.org/pkglint/...
  step_msg "Generating source code"
  go generate netbsd.org/pkglint/...
  if [ $run_tests = yes ]; then
    step_msg "Testing pkglint"
    go test -test.count 1 -v netbsd.org/pkglint/...
  fi
}

qa_install() {
  qa_test
  step_msg "Installing pkglint"
  go install netbsd.org/pkglint/...
  cp "$GOPATH/bin/pkglint.exe" "$archivedir/$runid.exe"
}

qa_analyze() {
  step_msg "Analyzing code style"
  (cd "$srcdir" && golangci-lint run)
}

qa_gobco() {
  step_msg "Running gobco to measure code coverage"
  # see https://github.com/rillig/gobco
  (cd "$srcdir" \
   && command gobco > "$archivedir/gobco.txt.tmp" || true \
   && mv -f "$archivedir/gobco.txt.tmp" "$archivedir/gobco.txt")
}

qa_netbsd() {
  step_msg "Checking for release blockers"
  if (cd "$srcdir" && grep -n "@beta" -- *.go); then
    exit 1
  fi
  if (cd "$srcdir" && grep -n "@BMAKE@" -- *_test.go); then
    exit 1
  fi
  if (cd "$srcdir" && grep -n "@VERSION@" -- *_test.go); then
    exit 1
  fi
  if (cd "$srcdir" && grep -F -n "\$NetBSD\$" -- *_test.go); then
    exit 1
  fi

  step_msg "Copying files to NetBSD VM"
  rsync -a --delete --rsync-path=/usr/pkg/bin/rsync \
    --chmod=F0664 \
    --cvs-exclude \
    --exclude="qa-pkglint" \
    --exclude="*.out" \
    --exclude="/.editorconfig" \
    --exclude=".git*" \
    --exclude="/.travis.yml" \
    --exclude="/COPYING" \
    --exclude="/*.md" \
    --exclude="/TODO.txt" \
    --exclude="/archive/" \
    --exclude="/coverage.html" \
    --exclude="/pkglint.cov" \
    --exclude="/pkglint.exe" \
    --exclude="/pkglint.test.exe" \
    --exclude="/shell/" \
    --exclude="/tools/" \
    --exclude="*.docx" \
    --exclude="/.idea/" \
    --exclude="/.vscode/" \
    --exclude="*.iml" \
    --exclude="*yacc.go" \
    --exclude="*.log" \
    "$srcdir/" netbsd:proj/pkgsrc/pkgtools/pkglint/files/

  step_msg "Installing NetBSD package"
  cmd=". ./.bash_profile"
  cmd="$cmd && cd proj/pkgsrc/pkgtools/pkglint"
  cmd="$cmd && env - PATH=/bin:/usr/bin PKGSRC_RUN_TEST=yes \"\$HOME/minipkg/bin/bmake\" clean update"
  cmd="$cmd && env - PATH=/bin:/usr/bin PKGSRC_RUN_TEST=no \"\$HOME/minipkg/bin/bmake\" clean update"
  cmd="$cmd && \"\$HOME/minipkg/bin/pkglint\" -Wall"
  # shellcheck disable=SC2029
  ssh netbsd "$cmd"
}

qa_codewalk() {
  step_msg "Regenerating codewalk.md"
  # See https://github.com/rillig/go-codewalk
  (cd "$srcdir" && codewalk codewalk.src.md codewalk.md)
}

qa_pkgsrc() {
  qa_genrunid
  step_msg "Running pkglint on the pkgsrc tree"
  time (
    cd "$pkgsrcdir" \
    && printf 'pkgsrc HEAD commit: %s\n' "$(git rev-parse HEAD)" \
    && printf 'pkgsrc-wip HEAD commit: %s\n' "$(git -C wip rev-parse HEAD)" \
    && printf '\n' \
    && { GODEBUG=gctrace=1 "$archivedir/$runid.exe" -s -pr -Wall -Call . wip 2> "$archivedir/$runid.err" || true; } \
    && : cp "pkglint.pprof" "$archivedir/$runid.pprof" \
    && : cp "pkglint.heapdump" "$archivedir/$runid.heapdump"
    ) > "$archivedir/$runid.tmp" || true
  mv "$archivedir/$runid.tmp" "$archivedir/$runid.out"
}

qa_cover_pkgsrc() {
  qa_genrunid
  step_msg "Running code coverage on the pkgsrc tree"
  env \
      PKGLINT_TESTDIR="$pkgsrcdir" \
      PKGLINT_TESTCMDLINE="-r -Wall -Call -p -s -e" \
  gobco \
      -test=-test.covermode=count \
      -test=-test.coverprofile="$archivedir/$runid.cover.txt" \
      -test=-timeout=1000s \
      -test=-check.f="^Test_Pkglint_Main__realistic" \
      -stats="$archivedir/$runid.cover.gobco.json" \
      "$srcdir" \
      > "$archivedir/$runid.cover.out"
}

qa_diffs() {
  step_msg "Generating diffs"
  (
    cd "$archivedir"
    for out in [0-9]*-*-*.out; do
      diff -u -- *.ref "$out" > "${out%.out}.diff" || true
      perl -e '
        use strict;
        use warnings;

        sub readhisto($) {
          my ($filename) = @_;
          my %histo = ();
          open(my $f, "<", $filename) or die;
          while (defined(my $line = <$f>)) {
            if ($line =~ /^loghisto[\t ]+(\d+)[\t ]+(.*)$/) {
              $histo{$2} = +$1;
            }
          }
          return \%histo;
        }

        my $del = readhisto(shift());
        my $add = readhisto(shift());
        my %all = ();
        foreach my $key (keys %$del) { $all{$key} += $del->{$key}; }
        foreach my $key (keys %$add) { $all{$key} += $add->{$key}; }
        foreach my $key (sort { $all{$b} <=> $all{$a} || $a cmp $b } keys %all) {
          my $ndel = exists($del->{$key}) ? $del->{$key} : 0;
          my $nadd = exists($add->{$key}) ? $add->{$key} : 0;
          if ($ndel != $nadd) {
            printf("%5d   %5d   %+5d   %s\n", $ndel, $nadd, $nadd - $ndel, $key);
          }
        }
        ' -- *.ref "$out" >> "${out%.out}.diff"
      test -s "${out%.out}.diff" || rm "${out%.out}.diff"
    done
  )
}

case "$*" in
"")
  set -- install pkgsrc diffs
  ;;
"pprof "*)
  cd "$archivedir"
  go tool pprof -http ":1$2" ./*"$2"*.exe ./*"$2"*.pprof &
  exit 0
  ;;
"notest")
  set -- install_notest pkgsrc diffs
  ;;
esac

for cmd in "$@"; do
  "qa_$cmd"
done

step_msg "OK"
