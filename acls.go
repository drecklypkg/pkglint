package main

// This file defines the specific type of some variables, according to
// their current use in pkgsrc.
//
// The type YesNo is used for variables that are checked using
//     .if defined(VAR) && !empty(VAR:M[Yy][Ee][Ss])
//
// The type Yes is used for variables that are checked using
//     .if defined(VAR)
//
// There are two types of lists:
// * LK_SHELL is a list whose elements are split by shell rules
// * LK_SPACE is a list whose elements are split by whitespace
//
// The other types are described in pkglint.pl, checkline_mk_vartype_basic.
//
// Last synced with mk/defaults/mk.conf revision 1.118

var aclVartypes = make(map[string]*Vartype)

func acl(varname string, kindOfList KindOfList, vartype string, aclentries ...string) {
	m := mustMatch(`^([A-Z_.][A-Z0-9_]*)(|\*|\.\*)$`, varname)
	varbase, varparam := m[1], m[2]
	m = mustMatch(`^(?:([\w\d_]+)|\{\s*([\w\d_+,\-.\s]+?)\s*\})$`, vartype)
	basicType, enumValues := m[1], m[2]

	var vtype *Vartype
	if basicType != "" {
		lookupPrimitiveCheck(basicType)
		vtype = newBasicVartype(kindOfList, basicType, parseAclEntries(aclentries), NOT_GUESSED)
	} else {
		vtype = newEnumVartype(kindOfList, enumValues, parseAclEntries(aclentries), NOT_GUESSED)
	}

	if varparam == "" || varparam == "*" {
		aclVartypes[varbase] = vtype
	}
	if varparam == "*" || varparam == ".*" {
		aclVartypes[varbase+".*"] = vtype
	}
}

// A package-defined variable may be set in all Makefiles except buildlink3.mk and builtin.mk.
func pkg(varname string, kindOfList KindOfList, vartype string) {
	acl(varname, kindOfList, vartype, "Makefile:su", "Makefile.common:dsu", "buildlink3.mk:", "builtin.mk:", "*.mk:dsu")
}

// A package-defined list may be appended to in all Makefiles except buildlink3.mk and builtin.mk.
// Simple assignment (instead of appending) is only allowed in Makefile and Makefile.common.
func pkglist(varname string, kindOfList KindOfList, vartype string) {
	acl(varname, kindOfList, vartype, "Makefile:asu", "Makefile.common:asu", "buildlink3.mk:", "builtin.mk:", "*.mk:au")
}

// A user-defined or system-defined variable must not be set by any
// package file. It also must not be used in buildlink3.mk and
// builtin.mk files or at load-time, since the system/user preferences
// may not have been loaded when these files are included.
func sys(varname string, kindOfList KindOfList, vartype string) {
	acl(varname, kindOfList, vartype, "buildlink3.mk:", "builtin.mk:", "*:u")
}
func usr(varname string, kindOfList KindOfList, vartype string) {
	acl(varname, kindOfList, vartype, "buildlink3.mk:", "builtin.mk:", "*:u")
}
func bl3list(varname string, kindOfList KindOfList, vartype string) {
	acl(varname, kindOfList, vartype, "buildlink3.mk:a", "builtin.mk:a")
}
func cmdline(varname string, kindOfList KindOfList, vartype string) {
	acl(varname, kindOfList, vartype, "buildlink3.mk:", "builtin.mk:", "*:pu")
}

func initacls() {
	usr("ALLOW_VULNERABLE_PACKAGES", LK_NONE, "Yes")
	usr("MANINSTALL", LK_SHELL, "{ maninstall catinstall }")
	usr("MANZ", LK_NONE, "Yes")
	usr("GZIP", LK_SHELL, "ShellWord")
	usr("MKCRYPTO", LK_NONE, "YesNo")
	usr("OBJHOSTNAME", LK_NONE, "Yes")
	usr("OBJMACHINE", LK_NONE, "Yes")
	usr("PKG_SUFX", LK_NONE, "Filename")
	usr("PKGSRC_LOCKTYPE", LK_NONE, "{ none sleep once }")
	usr("PKGSRC_SLEEPSECS", LK_NONE, "Integer")
	usr("USETBL", LK_NONE, "Yes")
	usr("ABI", LK_NONE, "{ 32 64 }")
	usr("PKG_DEVELOPER", LK_NONE, "Yes")
	usr("USE_ABI_DEPENDS", LK_NONE, "YesNo")
	usr("PKG_REGISTER_SHELLS", LK_NONE, "{ YES NO }")
	usr("PKGSRC_COMPILER", LK_SHELL, "{ ccache ccc clang distcc f2c gcc hp icc ido gcc mipspro mipspro-ucode pcc sunpro xlc }")
	usr("PKGSRC_MESSAGE_RECIPIENTS", LK_SHELL, "MailAddress")
	usr("PKGSRC_SHOW_BUILD_DEFS", LK_NONE, "YesNo")
	usr("PKGSRC_SHOW_PATCH_ERRORMSG", LK_NONE, "YesNo")
	usr("PKGSRC_RUN_TEST", LK_NONE, "YesNo")
	usr("PREFER_PKGSRC", LK_SHELL, "Identifier")
	usr("PREFER_NATIVE", LK_SHELL, "Identifier")
	usr("PREFER_NATIVE_PTHREADS", LK_NONE, "YesNo")
	usr("LOCALBASE", LK_NONE, "Pathname")
	usr("CROSSBASE", LK_NONE, "Pathname")
	usr("VARBASE", LK_NONE, "Pathname")
	usr("X11_TYPE", LK_NONE, "{ modular native }")
	usr("X11BASE", LK_NONE, "Pathname")
	usr("MOTIFBASE", LK_NONE, "Pathname")
	usr("PKGINFODIR", LK_NONE, "Pathname")
	usr("PKGMANDIR", LK_NONE, "Pathname")
	usr("USE_XPKGWEDGE", LK_NONE, "YesNo")
	usr("BSDSRCDIR", LK_NONE, "Pathname")
	usr("BSDXSRCDIR", LK_NONE, "Pathname")
	usr("DISTDIR", LK_NONE, "Pathname")
	usr("DIST_PATH", LK_NONE, "Pathlist")
	usr("DEFAULT_VIEW", LK_NONE, "Unchecked")
	usr("FETCH_CMD", LK_NONE, "ShellCommand")
	usr("FETCH_USING", LK_NONE, "{ curl custom fetch ftp manual wget }")
	usr("FETCH_RESUME_ARGS", LK_SHELL, "ShellWord")
	usr("FETCH_OUTPUT_ARGS", LK_SHELL, "ShellWord")
	usr("LIBTOOLIZE_PLIST", LK_NONE, "YesNo")
	usr("PKG_RESUME_TRANSFERS", LK_NONE, "YesNo")
	usr("PKG_SYSCONFBASE", LK_NONE, "Pathname")
	usr("RCD_SCRIPTS_DIR", LK_NONE, "Pathname")
	usr("PACKAGES", LK_NONE, "Pathname")
	usr("PKGVULNDIR", LK_NONE, "Pathname")
	usr("PASSIVE_FETCH", LK_NONE, "Yes")
	usr("PATCH_FUZZ_FACTOR", LK_NONE, "{ -F0 -F1 -F2 -F3 }")
	usr("ACCEPTABLE_LICENSES", LK_SHELL, "Identifier")
	usr("SPECIFIC_PKGS", LK_NONE, "Yes")
	usr("SITE_SPECIFIC_PKGS", LK_SHELL, "PkgPath")
	usr("HOST_SPECIFIC_PKGS", LK_SHELL, "PkgPath")
	usr("GROUP_SPECIFIC_PKGS", LK_SHELL, "PkgPath")
	usr("USER_SPECIFIC_PKGS", LK_SHELL, "PkgPath")
	usr("FAILOVER_FETCH", LK_NONE, "Yes")
	usr("MASTER_SORT", LK_SHELL, "Unchecked")
	usr("MASTER_SORT_REGEX", LK_SHELL, "Unchecked")
	usr("PATCH_DEBUG", LK_NONE, "Yes")
	usr("PKG_FC", LK_NONE, "ShellCommand")
	usr("IMAKE", LK_NONE, "ShellCommand")
	usr("IMAKEOPTS", LK_SHELL, "ShellWord")
	usr("PRE_ROOT_CMD", LK_NONE, "ShellCommand")
	pkg("USE_GAMESGROUP", LK_NONE, "YesNo")
	usr("SU_CMD", LK_NONE, "ShellCommand")
	usr("SU_CMD_PATH_APPEND", LK_NONE, "Pathlist")
	usr("FATAL_OBJECT_FMT_SKEW", LK_NONE, "YesNo")
	usr("WARN_NO_OBJECT_FMT", LK_NONE, "YesNo")
	usr("SMART_MESSAGES", LK_NONE, "Yes")
	usr("BINPKG_SITES", LK_SHELL, "URL")
	usr("BIN_INSTALL_FLAG", LK_SHELL, "ShellWord")
	usr("LOCALPATCHES", LK_NONE, "Pathname")

	// some other variables, sorted alphabetically

	sys(".CURDIR", LK_NONE, "Pathname")
	sys(".TARGET", LK_NONE, "Pathname")
	acl("ALL_ENV", LK_SHELL, "ShellWord")
	acl("ALTERNATIVES_FILE", LK_NONE, "Filename")
	acl("ALTERNATIVES_SRC", LK_SHELL, "Pathname")
	pkg("APACHE_MODULE", LK_NONE, "Yes")
	sys("AR", LK_NONE, "ShellCommand")
	sys("AS", LK_NONE, "ShellCommand")
	pkglist("AUTOCONF_REQD", LK_SHELL, "Version")
	acl("AUTOMAKE_OVERRIDE", LK_SHELL, "Pathmask")
	pkglist("AUTOMAKE_REQD", LK_SHELL, "Version")
	pkg("AUTO_MKDIRS", LK_NONE, "YesNo")
	usr("BATCH", LK_NONE, "Yes")
	acl("BDB185_DEFAULT", LK_NONE, "Unchecked")
	sys("BDBBASE", LK_NONE, "Pathname")
	pkg("BDB_ACCEPTED", LK_SHELL, "{ db1 db2 db3 db4 db5 }")
	acl("BDB_DEFAULT", LK_NONE, "{ db1 db2 db3 db4 db5 }")
	sys("BDB_LIBS", LK_SHELL, "LdFlag")
	sys("BDB_TYPE", LK_NONE, "{ db1 db2 db3 db4 db5 }")
	sys("BINGRP", LK_NONE, "UserGroupName")
	sys("BINMODE", LK_NONE, "FileMode")
	sys("BINOWN", LK_NONE, "UserGroupName")
	acl("BOOTSTRAP_DEPENDS", LK_SPACE, "DependencyWithPath", "Makefile.common:a", "Makefile:a", "options.mk:a", "*.mk:a")
	pkg("BOOTSTRAP_PKG", LK_NONE, "YesNo")
	acl("BROKEN", LK_NONE, "Message")
	pkg("BROKEN_GETTEXT_DETECTION", LK_NONE, "YesNo")
	pkglist("BROKEN_EXCEPT_ON_PLATFORM", LK_SHELL, "PlatformTriple")
	pkglist("BROKEN_ON_PLATFORM", LK_SPACE, "PlatformTriple")
	sys("BSD_MAKE_ENV", LK_SHELL, "ShellWord")
	acl("BUILDLINK_ABI_DEPENDS.*", LK_SPACE, "Dependency", "*:a")
	acl("BUILDLINK_API_DEPENDS.*", LK_SPACE, "Dependency", "*:a")
	acl("BUILDLINK_CONTENTS_FILTER", LK_SHELL, "ShellWord")
	// ^^ should rather be ShellCommand
	sys("BUILDLINK_CFLAGS", LK_SHELL, "CFlag")
	bl3list("BUILDLINK_CFLAGS.*", LK_SHELL, "CFlag")
	sys("BUILDLINK_CPPFLAGS", LK_SHELL, "CFlag")
	bl3list("BUILDLINK_CPPFLAGS.*", LK_SHELL, "CFlag")
	acl("BUILDLINK_CONTENTS_FILTER.*", LK_NONE, "ShellCommand", "buildlink3.mk:s")
	acl("BUILDLINK_DEPENDS", LK_SPACE, "Identifier", "buildlink3.mk:a")
	acl("BUILDLINK_DEPMETHOD.*", LK_SHELL, "BuildlinkDepmethod", "buildlink3.mk:ad", "Makefile:as", "Makefile.common:a", "*.mk:a")
	// ^^ FIXME: b:d may lead to unexpected behavior.
	acl("BUILDLINK_DEPTH", LK_NONE, "BuildlinkDepth", "buildlink3.mk:ps", "builtin.mk:ps")
	sys("BUILDLINK_DIR", LK_NONE, "Pathname")
	bl3list("BUILDLINK_FILES.*", LK_SHELL, "Pathmask")
	acl("BUILDLINK_FILES_CMD.*", LK_SHELL, "ShellWord")
	// ^^ ShellCommand
	acl("BUILDLINK_INCDIRS.*", LK_SHELL, "Pathname", "buildlink3.mk:ad") // b:d?
	acl("BUILDLINK_JAVA_PREFIX.*", LK_NONE, "Pathname", "buildlink3.mk:s")
	acl("BUILDLINK_LDADD.*", LK_SHELL, "LdFlag", "builtin.mk:adsu", "buildlink3.mk:", "Makefile:u", "Makefile.common:u", "*.mk:u")
	sys("BUILDLINK_LDFLAGS", LK_SHELL, "LdFlag")
	bl3list("BUILDLINK_LDFLAGS.*", LK_SHELL, "LdFlag")
	bl3list("BUILDLINK_LIBDIRS.*", LK_SHELL, "Pathname")
	acl("BUILDLINK_LIBS.*", LK_SHELL, "LdFlag", "buildlink3.mk:a")
	acl("BUILDLINK_PASSTHRU_DIRS", LK_SHELL, "Pathname", "Makefile:a", "Makefile.common:a", "buildlink3.mk:a", "hacks.mk:a")
	acl("BUILDLINK_PASSTHRU_RPATHDIRS", LK_SHELL, "Pathname", "Makefile:a", "Makefile.common:a", "buildlink3.mk:a", "hacks.mk:a")
	acl("BUILDLINK_PKGSRCDIR.*", LK_NONE, "RelativePkgDir", "buildlink3.mk:dp")
	acl("BUILDLINK_PREFIX.*", LK_NONE, "Pathname", "builtin.mk:su", "buildlink3.mk:", "Makefile:u", "Makefile.common:u", "*.mk:u")
	acl("BUILDLINK_RPATHDIRS.*", LK_SHELL, "Pathname", "buildlink3.mk:a")
	acl("BUILDLINK_TARGETS", LK_SHELL, "Identifier")
	acl("BUILDLINK_FNAME_TRANSFORM.*", LK_NONE, "SedCommands", "Makefile:a", "builtin.mk:a", "hacks.mk:a", "buildlink3.mk:a")
	acl("BUILDLINK_TRANSFORM", LK_SHELL, "WrapperTransform", "*:a")
	acl("BUILDLINK_TREE", LK_SHELL, "Identifier", "buildlink3.mk:a")
	acl("BUILD_DEFS", LK_SHELL, "Varname", "Makefile:a", "Makefile.common:a", "options.mk:a")
	acl("BUILD_DEPENDS", LK_SPACE, "DependencyWithPath", "Makefile.common:a", "Makefile:a", "options.mk:a", "*.mk:a")
	pkglist("BUILD_DIRS", LK_SHELL, "WrksrcSubdirectory")
	pkglist("BUILD_ENV", LK_SHELL, "ShellWord")
	sys("BUILD_MAKE_CMD", LK_NONE, "ShellCommand")
	pkglist("BUILD_MAKE_FLAGS", LK_SHELL, "ShellWord")
	pkg("BUILD_TARGET", LK_SHELL, "Identifier")
	pkg("BUILD_USES_MSGFMT", LK_NONE, "Yes")
	acl("BUILTIN_PKG", LK_NONE, "Identifier", "builtin.mk:psu")
	acl("BUILTIN_PKG.*", LK_NONE, "PkgName", "builtin.mk:psu")
	acl("BUILTIN_FIND_FILES_VAR", LK_SHELL, "Varname", "builtin.mk:s")
	acl("BUILTIN_FIND_FILES.*", LK_SHELL, "Pathname", "builtin.mk:s")
	acl("BUILTIN_FIND_GREP.*", LK_NONE, "String", "builtin.mk:s")
	acl("BUILTIN_FIND_LIBS", LK_SHELL, "Pathname", "builtin.mk:s")
	acl("BUILTIN_IMAKE_CHECK", LK_SHELL, "Unchecked", "builtin.mk:s")
	acl("BUILTIN_IMAKE_CHECK.*", LK_NONE, "YesNo")
	sys("BUILTIN_X11_TYPE", LK_NONE, "Unchecked")
	sys("BUILTIN_X11_VERSION", LK_NONE, "Unchecked")
	acl("CATEGORIES", LK_SHELL, "Category", "Makefile:as", "Makefile.common:ads")
	sys("CC_VERSION", LK_NONE, "Message")
	sys("CC", LK_NONE, "ShellCommand")
	pkglist("CFLAGS*", LK_SHELL, "CFlag")
	// ^^ may also be changed by the user
	acl("CHECK_BUILTIN", LK_NONE, "YesNo", "builtin.mk:d", "Makefile:s")
	acl("CHECK_BUILTIN.*", LK_NONE, "YesNo", "*:p")
	acl("CHECK_FILES_SKIP", LK_SHELL, "BasicRegularExpression", "Makefile:a", "Makefile.common:a")
	pkg("CHECK_FILES_SUPPORTED", LK_NONE, "YesNo")
	usr("CHECK_HEADERS", LK_NONE, "YesNo")
	pkglist("CHECK_HEADERS_SKIP", LK_SHELL, "Pathmask")
	usr("CHECK_INTERPRETER", LK_NONE, "YesNo")
	pkglist("CHECK_INTERPRETER_SKIP", LK_SHELL, "Pathmask")
	usr("CHECK_PERMS", LK_NONE, "YesNo")
	pkglist("CHECK_PERMS_SKIP", LK_SHELL, "Pathmask")
	//CHECK_PERMS_AUTOFIX", "YesNo", pkg...)
	// ^^ experimental
	usr("CHECK_PORTABILITY", LK_NONE, "YesNo")
	pkglist("CHECK_PORTABILITY_SKIP", LK_SHELL, "Pathmask")
	acl("CHECK_SHLIBS", LK_NONE, "YesNo", "Makefile:s")
	pkglist("CHECK_SHLIBS_SKIP", LK_SHELL, "Pathmask")
	acl("CHECK_SHLIBS_SUPPORTED", LK_NONE, "YesNo", "Makefile:s")
	pkglist("CHECK_WRKREF_SKIP", LK_SHELL, "Pathmask")
	pkg("CMAKE_ARG_PATH", LK_NONE, "Pathname")
	pkglist("CMAKE_ARGS", LK_SHELL, "ShellWord")
	acl("COMMENT", LK_NONE, "Comment", "Makefile:as", "Makefile.common:as")
	sys("COMPILER_RPATH_FLAG", LK_NONE, "{ -Wl,-rpath }")
	pkglist("CONFIGURE_ARGS", LK_SHELL, "ShellWord")
	pkglist("CONFIGURE_DIRS", LK_SHELL, "WrksrcSubdirectory")
	pkglist("CONFIGURE_ENV", LK_SHELL, "ShellWord")
	pkg("CONFIGURE_HAS_INFODIR", LK_NONE, "YesNo")
	pkg("CONFIGURE_HAS_LIBDIR", LK_NONE, "YesNo")
	pkg("CONFIGURE_HAS_MANDIR", LK_NONE, "YesNo")
	pkg("CONFIGURE_SCRIPT", LK_NONE, "Pathname")
	acl("CONFIG_GUESS_OVERRIDE", LK_SHELL, "Pathmask", "Makefile:as", "Makefile.common:as")
	acl("CONFIG_STATUS_OVERRIDE", LK_SHELL, "Pathmask", "Makefile:as", "Makefile.common:as")
	acl("CONFIG_SHELL", LK_NONE, "Pathname", "Makefile:s", "Makefile.common:s")
	acl("CONFIG_SUB_OVERRIDE", LK_SHELL, "Pathmask", "Makefile:as", "Makefile.common:as")
	pkglist("CONFLICTS", LK_SPACE, "Dependency")
	pkglist("CONF_FILES", LK_SHELL, "ShellWord")
	pkg("CONF_FILES_MODE", LK_NONE, "{ 0644 0640 0600 0400 }")
	pkglist("CONF_FILES_PERMS", LK_SHELL, "ShellWord")
	sys("COPY", LK_NONE, "{ -c }")
	// ^^ the flag that tells ${INSTALL} to copy a file
	sys("CPP", LK_NONE, "ShellCommand")
	pkglist("CPPFLAGS*", LK_SHELL, "CFlag")
	acl("CRYPTO", LK_NONE, "Yes", "Makefile:s")
	sys("CXX", LK_NONE, "ShellCommand")
	pkglist("CXXFLAGS*", LK_SHELL, "CFlag")
	acl("DEINSTALL_FILE", LK_NONE, "Pathname", "Makefile:s")
	acl("DEINSTALL_SRC", LK_SHELL, "Pathname", "Makefile:s", "Makefile.common:ds")
	acl("DEINSTALL_TEMPLATES", LK_SHELL, "Pathname", "Makefile:as", "Makefile.common:ads")
	sys("DELAYED_ERROR_MSG", LK_NONE, "ShellCommand")
	sys("DELAYED_WARNING_MSG", LK_NONE, "ShellCommand")
	pkglist("DEPENDS", LK_SPACE, "DependencyWithPath")
	usr("DEPENDS_TARGET", LK_SHELL, "Identifier")
	acl("DESCR_SRC", LK_SHELL, "Pathname", "Makefile:s", "Makefile.common:ds")
	sys("DESTDIR", LK_NONE, "Pathname")
	acl("DESTDIR_VARNAME", LK_NONE, "Varname", "Makefile:s", "Makefile.common:s")
	sys("DEVOSSAUDIO", LK_NONE, "Pathname")
	sys("DEVOSSSOUND", LK_NONE, "Pathname")
	pkglist("DISTFILES", LK_SHELL, "Filename")
	pkg("DISTINFO_FILE", LK_NONE, "RelativePkgPath")
	pkg("DISTNAME", LK_NONE, "Filename")
	pkg("DIST_SUBDIR", LK_NONE, "Pathname")
	acl("DJB_BUILD_ARGS", LK_SHELL, "ShellWord")
	acl("DJB_BUILD_TARGETS", LK_SHELL, "Identifier")
	acl("DJB_CONFIG_CMDS", LK_SHELL, "ShellWord", "options.mk:s")
	// ^^ ShellCommand, terminated by a semicolon
	acl("DJB_CONFIG_DIRS", LK_SHELL, "WrksrcSubdirectory")
	acl("DJB_CONFIG_HOME", LK_NONE, "Filename")
	acl("DJB_CONFIG_PREFIX", LK_NONE, "Pathname")
	acl("DJB_INSTALL_TARGETS", LK_SHELL, "Identifier")
	acl("DJB_MAKE_TARGETS", LK_NONE, "YesNo")
	acl("DJB_RESTRICTED", LK_NONE, "YesNo", "Makefile:s")
	acl("DJB_SLASHPACKAGE", LK_NONE, "YesNo")
	acl("DLOPEN_REQUIRE_PTHREADS", LK_NONE, "YesNo")
	acl("DL_AUTO_VARS", LK_NONE, "Yes", "Makefile:s", "Makefile.common:s", "options.mk:s")
	acl("DL_LIBS", LK_SHELL, "LdFlag")
	sys("DOCOWN", LK_NONE, "UserGroupName")
	sys("DOCGRP", LK_NONE, "UserGroupName")
	sys("DOCMODE", LK_NONE, "FileMode")
	sys("DOWNLOADED_DISTFILE", LK_NONE, "Pathname")
	sys("DO_NADA", LK_NONE, "ShellCommand")
	pkg("DYNAMIC_SITES_CMD", LK_NONE, "ShellCommand")
	pkg("DYNAMIC_SITES_SCRIPT", LK_NONE, "Pathname")
	sys("ECHO", LK_NONE, "ShellCommand")
	sys("ECHO_MSG", LK_NONE, "ShellCommand")
	sys("ECHO_N", LK_NONE, "ShellCommand")
	pkg("EGDIR", LK_NONE, "Pathname")
	// ^^ This variable is not defined by the system, but has been established
	// as a convention.
	sys("EMACS_BIN", LK_NONE, "Pathname")
	sys("EMACS_ETCPREFIX", LK_NONE, "Pathname")
	sys("EMACS_FLAVOR", LK_NONE, "{ emacs xemacs }")
	sys("EMACS_INFOPREFIX", LK_NONE, "Pathname")
	sys("EMACS_LISPPREFIX", LK_NONE, "Pathname")
	acl("EMACS_MODULES", LK_SHELL, "Identifier", "Makefile:as", "Makefile.common:as")
	sys("EMACS_PKGNAME_PREFIX", LK_NONE, "Identifier")
	// ^^ or the empty string.
	sys("EMACS_TYPE", LK_NONE, "{ emacs xemacs }")
	acl("EMACS_USE_LEIM", LK_NONE, "Yes")
	acl("EMACS_VERSIONS_ACCEPTED", LK_SHELL, "{ emacs25 emacs24 emacs24nox emacs23 emacs23nox emacs22 emacs22nox emacs21 emacs21nox emacs20 xemacs215 xemacs215nox xemacs214 xemacs214nox}", "Makefile:s")
	sys("EMACS_VERSION_MAJOR", LK_NONE, "Integer")
	sys("EMACS_VERSION_MINOR", LK_NONE, "Integer")
	acl("EMACS_VERSION_REQD", LK_SHELL, "{ emacs24 emacs24nox emacs23 emacs23nox emacs22 emacs22nox emacs21 emacs21nox emacs20 xemacs215 xemacs214 }", "Makefile:as")
	sys("EMULDIR", LK_NONE, "Pathname")
	sys("EMULSUBDIR", LK_NONE, "Pathname")
	sys("OPSYS_EMULDIR", LK_NONE, "Pathname")
	sys("EMULSUBDIRSLASH", LK_NONE, "Pathname")
	sys("EMUL_ARCH", LK_NONE, "{ i386 none }")
	sys("EMUL_DISTRO", LK_NONE, "Identifier")
	sys("EMUL_IS_NATIVE", LK_NONE, "Yes")
	pkg("EMUL_MODULES.*", LK_SHELL, "Identifier")
	sys("EMUL_OPSYS", LK_NONE, "{ freebsd hpux irix linux osf1 solaris sunos none }")
	pkg("EMUL_PKG_FMT", LK_NONE, "{ plain rpm }")
	usr("EMUL_PLATFORM", LK_NONE, "EmulPlatform")
	pkg("EMUL_PLATFORMS", LK_SHELL, "EmulPlatform")
	usr("EMUL_PREFER", LK_SHELL, "EmulPlatform")
	pkg("EMUL_REQD", LK_SPACE, "Dependency")
	usr("EMUL_TYPE.*", LK_NONE, "{ native builtin suse suse-9.1 suse-9.x suse-10.0 suse-10.x }")
	sys("ERROR_CAT", LK_NONE, "ShellCommand")
	sys("ERROR_MSG", LK_NONE, "ShellCommand")
	acl("EVAL_PREFIX", LK_SPACE, "ShellWord", "Makefile:a", "Makefile.common:a")
	// ^^ FIXME: Looks like a type mismatch.
	sys("EXPORT_SYMBOLS_LDFLAGS", LK_SHELL, "LdFlag")
	sys("EXTRACT_CMD", LK_NONE, "ShellCommand")
	pkg("EXTRACT_DIR", LK_NONE, "Pathname")
	pkglist("EXTRACT_ELEMENTS", LK_SHELL, "Pathmask")
	pkglist("EXTRACT_ENV", LK_SHELL, "ShellWord")
	pkglist("EXTRACT_ONLY", LK_SHELL, "Pathname")
	acl("EXTRACT_OPTS", LK_SHELL, "ShellWord", "Makefile:as", "Makefile.common:as")
	acl("EXTRACT_OPTS_BIN", LK_SHELL, "ShellWord", "Makefile:as", "Makefile.common:as")
	acl("EXTRACT_OPTS_LHA", LK_SHELL, "ShellWord", "Makefile:as", "Makefile.common:as")
	acl("EXTRACT_OPTS_PAX", LK_SHELL, "ShellWord", "Makefile:as", "Makefile.common:as")
	acl("EXTRACT_OPTS_RAR", LK_SHELL, "ShellWord", "Makefile:as", "Makefile.common:as")
	acl("EXTRACT_OPTS_TAR", LK_SHELL, "ShellWord", "Makefile:as", "Makefile.common:as")
	acl("EXTRACT_OPTS_ZIP", LK_SHELL, "ShellWord", "Makefile:as", "Makefile.common:as")
	acl("EXTRACT_OPTS_ZOO", LK_SHELL, "ShellWord", "Makefile:as", "Makefile.common:as")
	pkg("EXTRACT_SUFX", LK_NONE, "DistSuffix")
	pkg("EXTRACT_USING", LK_NONE, "{ bsdtar gtar nbtar pax }")
	sys("FAIL_MSG", LK_NONE, "ShellCommand")
	sys("FAMBASE", LK_NONE, "Pathname")
	pkg("FAM_ACCEPTED", LK_SHELL, "{ fam gamin }")
	usr("FAM_DEFAULT", LK_NONE, "{ fam gamin }")
	sys("FAM_TYPE", LK_NONE, "{ fam gamin }")
	acl("FETCH_BEFORE_ARGS", LK_SHELL, "ShellWord", "Makefile:as")
	pkglist("FETCH_MESSAGE", LK_SHELL, "ShellWord")
	pkg("FILESDIR", LK_NONE, "RelativePkgPath")
	pkglist("FILES_SUBST", LK_SHELL, "ShellWord")
	acl("FILES_SUBST_SED", LK_SHELL, "ShellWord")
	pkglist("FIX_RPATH", LK_SHELL, "Varname")
	pkglist("FLEX_REQD", LK_SHELL, "Version")
	acl("FONTS_DIRS.*", LK_SHELL, "Pathname", "Makefile:as", "Makefile.common:a")
	sys("GAMEDATAMODE", LK_NONE, "FileMode")
	sys("GAMES_GROUP", LK_NONE, "UserGroupName")
	sys("GAMEMODE", LK_NONE, "FileMode")
	sys("GAMES_USER", LK_NONE, "UserGroupName")
	pkglist("GCC_REQD", LK_SHELL, "Version")
	pkglist("GENERATE_PLIST", LK_SHELL, "ShellWord")
	// ^^ List of Shellcommand, terminated with a semicolon
	pkg("GITHUB_PROJECT", LK_NONE, "Identifier")
	pkg("GITHUB_TAG", LK_NONE, "Identifier")
	pkg("GITHUB_RELEASE", LK_NONE, "Filename")
	pkg("GITHUB_TYPE", LK_NONE, "{ tag release }")
	acl("GNU_ARCH", LK_NONE, "{ mips }")
	acl("GNU_CONFIGURE", LK_NONE, "Yes", "Makefile.common:s", "Makefile:s")
	acl("GNU_CONFIGURE_INFODIR", LK_NONE, "Pathname", "Makefile:s", "Makefile.common:s")
	acl("GNU_CONFIGURE_LIBDIR", LK_NONE, "Pathname", "Makefile:s", "Makefile.common:s")
	pkg("GNU_CONFIGURE_LIBSUBDIR", LK_NONE, "Pathname")
	acl("GNU_CONFIGURE_MANDIR", LK_NONE, "Pathname", "Makefile:s", "Makefile.common:s")
	acl("GNU_CONFIGURE_PREFIX", LK_NONE, "Pathname", "Makefile:s")
	acl("HAS_CONFIGURE", LK_NONE, "Yes", "Makefile:s", "Makefile.common:s")
	pkglist("HEADER_TEMPLATES", LK_SHELL, "Pathname")
	pkg("HOMEPAGE", LK_NONE, "URL")
	acl("IGNORE_PKG.*", LK_NONE, "Yes", "*:sp")
	acl("INCOMPAT_CURSES", LK_SPACE, "PlatformTriple", "Makefile:as")
	acl("INCOMPAT_ICONV", LK_SPACE, "PlatformTriple")
	acl("INFO_DIR", LK_NONE, "Pathname")
	// ^^ relative to PREFIX")
	pkg("INFO_FILES", LK_NONE, "Yes")
	sys("INSTALL", LK_NONE, "ShellCommand")
	pkglist("INSTALLATION_DIRS", LK_SHELL, "PrefixPathname")
	pkg("INSTALLATION_DIRS_FROM_PLIST", LK_NONE, "Yes")
	sys("INSTALL_DATA", LK_NONE, "ShellCommand")
	sys("INSTALL_DATA_DIR", LK_NONE, "ShellCommand")
	pkglist("INSTALL_DIRS", LK_SHELL, "WrksrcSubdirectory")
	pkglist("INSTALL_ENV", LK_SHELL, "ShellWord")
	acl("INSTALL_FILE", LK_NONE, "Pathname", "Makefile:s")
	sys("INSTALL_GAME", LK_NONE, "ShellCommand")
	sys("INSTALL_GAME_DATA", LK_NONE, "ShellCommand")
	sys("INSTALL_LIB", LK_NONE, "ShellCommand")
	sys("INSTALL_LIB_DIR", LK_NONE, "ShellCommand")
	pkglist("INSTALL_MAKE_FLAGS", LK_SHELL, "ShellWord")
	sys("INSTALL_MAN", LK_NONE, "ShellCommand")
	sys("INSTALL_MAN_DIR", LK_NONE, "ShellCommand")
	sys("INSTALL_PROGRAM", LK_NONE, "ShellCommand")
	sys("INSTALL_PROGRAM_DIR", LK_NONE, "ShellCommand")
	sys("INSTALL_SCRIPT", LK_NONE, "ShellCommand")
	acl("INSTALL_SCRIPTS_ENV", LK_SHELL, "ShellWord")
	sys("INSTALL_SCRIPT_DIR", LK_NONE, "ShellCommand")
	acl("INSTALL_SRC", LK_SHELL, "Pathname", "Makefile:s", "Makefile.common:ds")
	pkg("INSTALL_TARGET", LK_SHELL, "Identifier")
	acl("INSTALL_TEMPLATES", LK_SHELL, "Pathname", "Makefile:as", "Makefile.common:ads")
	acl("INSTALL_UNSTRIPPED", LK_NONE, "YesNo", "Makefile:s", "Makefile.common:s")
	pkg("INTERACTIVE_STAGE", LK_SHELL, "{ fetch extract configure build install }")
	acl("IS_BUILTIN.*", LK_NONE, "YesNo_Indirectly", "builtin.mk:psu")
	sys("JAVA_BINPREFIX", LK_NONE, "Pathname")
	pkg("JAVA_CLASSPATH", LK_NONE, "ShellWord")
	pkg("JAVA_HOME", LK_NONE, "Pathname")
	pkg("JAVA_NAME", LK_NONE, "Filename")
	pkglist("JAVA_UNLIMIT", LK_SHELL, "{ cmdsize datasize stacksize }")
	pkglist("JAVA_WRAPPERS", LK_SPACE, "Filename")
	pkg("JAVA_WRAPPER_BIN.*", LK_NONE, "Pathname")
	sys("KRB5BASE", LK_NONE, "Pathname")
	acl("KRB5_ACCEPTED", LK_SHELL, "{ heimdal mit-krb5 }")
	usr("KRB5_DEFAULT", LK_NONE, "{ heimdal mit-krb5 }")
	sys("KRB5_TYPE", LK_NONE, "Unchecked")
	sys("LD", LK_NONE, "ShellCommand")
	pkglist("LDFLAGS*", LK_SHELL, "LdFlag")
	sys("LIBGRP", LK_NONE, "UserGroupName")
	sys("LIBMODE", LK_NONE, "FileMode")
	sys("LIBOWN", LK_NONE, "UserGroupName")
	sys("LIBOSSAUDIO", LK_NONE, "Pathname")
	pkglist("LIBS*", LK_SHELL, "LdFlag")
	sys("LIBTOOL", LK_NONE, "ShellCommand")
	acl("LIBTOOL_OVERRIDE", LK_SHELL, "Pathmask", "Makefile:as")
	pkglist("LIBTOOL_REQD", LK_SHELL, "Version")
	acl("LICENCE", LK_NONE, "License", "Makefile:s", "Makefile.common:s", "options.mk:s")
	acl("LICENSE", LK_NONE, "License", "Makefile:s", "Makefile.common:s", "options.mk:s")
	pkg("LICENSE_FILE", LK_NONE, "Pathname")
	sys("LINKER_RPATH_FLAG", LK_NONE, "ShellWord")
	sys("LOWER_OPSYS", LK_NONE, "Identifier")
	acl("LTCONFIG_OVERRIDE", LK_SHELL, "Pathmask", "Makefile:as", "Makefile.common:a")
	sys("MACHINE_ARCH", LK_NONE, "Identifier")
	sys("MACHINE_GNU_PLATFORM", LK_NONE, "PlatformTriple")
	acl("MAINTAINER", LK_NONE, "MailAddress", "Makefile:s", "Makefile.common:d")
	sys("MAKE", LK_NONE, "ShellCommand")
	pkglist("MAKEFLAGS", LK_SHELL, "ShellWord")
	acl("MAKEVARS", LK_SHELL, "Varname", "builtin.mk:a", "buildlink3.mk:a", "hacks.mk:a")
	pkglist("MAKE_DIRS", LK_SHELL, "Pathname")
	pkglist("MAKE_DIRS_PERMS", LK_SHELL, "ShellWord")
	pkglist("MAKE_ENV", LK_SHELL, "ShellWord")
	pkg("MAKE_FILE", LK_NONE, "Pathname")
	pkglist("MAKE_FLAGS", LK_SHELL, "ShellWord")
	usr("MAKE_JOBS", LK_NONE, "Integer")
	pkg("MAKE_JOBS_SAFE", LK_NONE, "YesNo")
	pkg("MAKE_PROGRAM", LK_NONE, "ShellCommand")
	acl("MANCOMPRESSED", LK_NONE, "YesNo", "Makefile:s", "Makefile.common:ds")
	acl("MANCOMPRESSED_IF_MANZ", LK_NONE, "Yes", "Makefile:s", "Makefile.common:ds")
	sys("MANGRP", LK_NONE, "UserGroupName")
	sys("MANMODE", LK_NONE, "FileMode")
	sys("MANOWN", LK_NONE, "UserGroupName")
	pkglist("MASTER_SITES", LK_SHELL, "FetchURL")
	sys("MASTER_SITE_APACHE", LK_SHELL, "FetchURL")
	sys("MASTER_SITE_BACKUP", LK_SHELL, "FetchURL")
	sys("MASTER_SITE_CYGWIN", LK_SHELL, "FetchURL")
	sys("MASTER_SITE_DEBIAN", LK_SHELL, "FetchURL")
	sys("MASTER_SITE_FREEBSD", LK_SHELL, "FetchURL")
	sys("MASTER_SITE_FREEBSD_LOCAL", LK_SHELL, "FetchURL")
	sys("MASTER_SITE_GENTOO", LK_SHELL, "FetchURL")
	sys("MASTER_SITE_GITHUB", LK_SHELL, "FetchURL")
	sys("MASTER_SITE_GNOME", LK_SHELL, "FetchURL")
	sys("MASTER_SITE_GNU", LK_SHELL, "FetchURL")
	sys("MASTER_SITE_GNUSTEP", LK_SHELL, "FetchURL")
	sys("MASTER_SITE_IFARCHIVE", LK_SHELL, "FetchURL")
	sys("MASTER_SITE_HASKELL_HACKAGE", LK_SHELL, "FetchURL")
	sys("MASTER_SITE_KDE", LK_SHELL, "FetchURL")
	sys("MASTER_SITE_LOCAL", LK_SHELL, "FetchURL")
	sys("MASTER_SITE_MOZILLA", LK_SHELL, "FetchURL")
	sys("MASTER_SITE_MOZILLA_ALL", LK_SHELL, "FetchURL")
	sys("MASTER_SITE_MOZILLA_ESR", LK_SHELL, "FetchURL")
	sys("MASTER_SITE_MYSQL", LK_SHELL, "FetchURL")
	sys("MASTER_SITE_NETLIB", LK_SHELL, "FetchURL")
	sys("MASTER_SITE_OPENOFFICE", LK_SHELL, "FetchURL")
	sys("MASTER_SITE_OSDN", LK_SHELL, "FetchURL")
	sys("MASTER_SITE_PERL_CPAN", LK_SHELL, "FetchURL")
	sys("MASTER_SITE_R_CRAN", LK_SHELL, "FetchURL")
	sys("MASTER_SITE_RUBYGEMS", LK_SHELL, "FetchURL")
	sys("MASTER_SITE_SOURCEFORGE", LK_SHELL, "FetchURL")
	sys("MASTER_SITE_SUNSITE", LK_SHELL, "FetchURL")
	sys("MASTER_SITE_SUSE", LK_SHELL, "FetchURL")
	sys("MASTER_SITE_TEX_CTAN", LK_SHELL, "FetchURL")
	sys("MASTER_SITE_XCONTRIB", LK_SHELL, "FetchURL")
	sys("MASTER_SITE_XEMACS", LK_SHELL, "FetchURL")
	pkglist("MESSAGE_SRC", LK_SHELL, "Pathname")
	acl("MESSAGE_SUBST", LK_SHELL, "ShellWord", "Makefile.common:a", "Makefile:a", "options.mk:a")
	pkg("META_PACKAGE", LK_NONE, "Yes")
	sys("MISSING_FEATURES", LK_SHELL, "Identifier")
	acl("MYSQL_VERSIONS_ACCEPTED", LK_SHELL, "{ 51 55 56 }", "Makefile:s")
	usr("MYSQL_VERSION_DEFAULT", LK_NONE, "Version")
	sys("NM", LK_NONE, "ShellCommand")
	sys("NONBINMODE", LK_NONE, "FileMode")
	pkg("NOT_FOR_COMPILER", LK_SHELL, "{ ccache ccc clang distcc f2c gcc hp icc ido mipspro mipspro-ucode pcc sunpro xlc }")
	pkglist("NOT_FOR_PLATFORM", LK_SPACE, "PlatformTriple")
	pkg("NOT_FOR_UNPRIVILEGED", LK_NONE, "YesNo")
	acl("NO_BIN_ON_CDROM", LK_NONE, "Restricted", "Makefile:s", "Makefile.common:s")
	acl("NO_BIN_ON_FTP", LK_NONE, "Restricted", "Makefile:s", "Makefile.common:s")
	acl("NO_BUILD", LK_NONE, "Yes", "Makefile:s", "Makefile.common:s", "Makefile.*:ds")
	pkg("NO_CHECKSUM", LK_NONE, "Yes")
	pkg("NO_CONFIGURE", LK_NONE, "Yes")
	acl("NO_EXPORT_CPP", LK_NONE, "Yes", "Makefile:s")
	pkg("NO_EXTRACT", LK_NONE, "Yes")
	pkg("NO_INSTALL_MANPAGES", LK_NONE, "Yes") // only has an effect for Imake packages.
	acl("NO_PKGTOOLS_REQD_CHECK", LK_NONE, "Yes", "Makefile:s")
	acl("NO_SRC_ON_CDROM", LK_NONE, "Restricted", "Makefile:s", "Makefile.common:s")
	acl("NO_SRC_ON_FTP", LK_NONE, "Restricted", "Makefile:s", "Makefile.common:s")
	pkglist("ONLY_FOR_COMPILER", LK_SHELL, "{ ccc clang gcc hp icc ido mipspro mipspro-ucode pcc sunpro xlc }")
	pkglist("ONLY_FOR_PLATFORM", LK_SPACE, "PlatformTriple")
	pkg("ONLY_FOR_UNPRIVILEGED", LK_NONE, "YesNo")
	sys("OPSYS", LK_NONE, "Identifier")
	acl("OPSYSVARS", LK_SHELL, "Varname", "Makefile:a", "Makefile.common:a")
	acl("OSVERSION_SPECIFIC", LK_NONE, "Yes", "Makefile:s", "Makefile.common:s")
	sys("OS_VERSION", LK_NONE, "Version")
	pkg("OVERRIDE_DIRDEPTH*", LK_NONE, "Integer")
	pkg("OVERRIDE_GNU_CONFIG_SCRIPTS", LK_NONE, "Yes")
	acl("OWNER", LK_NONE, "MailAddress", "Makefile:s", "Makefile.common:d")
	pkglist("OWN_DIRS", LK_SHELL, "Pathname")
	pkglist("OWN_DIRS_PERMS", LK_SHELL, "ShellWord")
	sys("PAMBASE", LK_NONE, "Pathname")
	usr("PAM_DEFAULT", LK_NONE, "{ linux-pam openpam solaris-pam }")
	acl("PATCHDIR", LK_NONE, "RelativePkgPath", "Makefile:s", "Makefile.common:ds")
	pkglist("PATCHFILES", LK_SHELL, "Filename")
	acl("PATCH_ARGS", LK_SHELL, "ShellWord")
	acl("PATCH_DIST_ARGS", LK_SHELL, "ShellWord", "Makefile:as")
	acl("PATCH_DIST_CAT", LK_NONE, "ShellCommand")
	acl("PATCH_DIST_STRIP*", LK_NONE, "ShellWord", "Makefile:s", "Makefile.common:s", "buildlink3.mk:", "builtin.mk:", "*.mk:s")
	acl("PATCH_SITES", LK_SHELL, "URL", "Makefile:s", "options.mk:s", "Makefile.common:s")
	acl("PATCH_STRIP", LK_NONE, "ShellWord")
	pkg("PERL5_USE_PACKLIST", LK_NONE, "YesNo")
	acl("PERL5_PACKLIST", LK_SHELL, "Perl5Packlist", "Makefile:s", "options.mk:sa")
	acl("PERL5_PACKLIST_DIR", LK_NONE, "Pathname")
	sys("PGSQL_PREFIX", LK_NONE, "Pathname")
	acl("PGSQL_VERSIONS_ACCEPTED", LK_SHELL, "{ 82 83 84 90 91 }")
	usr("PGSQL_VERSION_DEFAULT", LK_NONE, "Version")
	sys("PG_LIB_EXT", LK_NONE, "{ dylib so }")
	sys("PGSQL_TYPE", LK_NONE, "{ postgresql81-client postgresql80-client }")
	sys("PGPKGSRCDIR", LK_NONE, "Pathname")
	sys("PHASE_MSG", LK_NONE, "ShellCommand")
	usr("PHP_VERSION_REQD", LK_NONE, "Version")
	sys("PKGBASE", LK_NONE, "Identifier")
	acl("PKGCONFIG_OVERRIDE", LK_SHELL, "Pathmask", "Makefile:as", "Makefile.common:a")
	pkg("PKGCONFIG_OVERRIDE_STAGE", LK_NONE, "Stage")
	pkg("PKGDIR", LK_NONE, "RelativePkgDir")
	sys("PKGDIRMODE", LK_NONE, "FileMode")
	sys("PKGLOCALEDIR", LK_NONE, "Pathname")
	pkg("PKGNAME", LK_NONE, "PkgName")
	sys("PKGNAME_NOREV", LK_NONE, "PkgName")
	sys("PKGPATH", LK_NONE, "Pathname")
	acl("PKGREPOSITORY", LK_NONE, "Unchecked")
	acl("PKGREVISION", LK_NONE, "PkgRevision", "Makefile:s")
	sys("PKGSRCDIR", LK_NONE, "Pathname")
	acl("PKGSRCTOP", LK_NONE, "Yes", "Makefile:s")
	acl("PKGTOOLS_ENV", LK_SHELL, "ShellWord")
	sys("PKGVERSION", LK_NONE, "Version")
	sys("PKGWILDCARD", LK_NONE, "Filemask")
	sys("PKG_ADMIN", LK_NONE, "ShellCommand")
	sys("PKG_APACHE", LK_NONE, "{ apache22 apache24 }")
	pkg("PKG_APACHE_ACCEPTED", LK_SHELL, "{ apache22 apache24 }")
	usr("PKG_APACHE_DEFAULT", LK_NONE, "{ apache22 apache24 }")
	usr("PKG_CONFIG", LK_NONE, "Yes")
	// ^^ No, this is not the popular command from GNOME, but the setting
	// whether the pkgsrc user wants configuration files automatically
	// installed or not.
	sys("PKG_CREATE", LK_NONE, "ShellCommand")
	sys("PKG_DBDIR", LK_NONE, "Pathname")
	cmdline("PKG_DEBUG_LEVEL", LK_NONE, "Integer")
	usr("PKG_DEFAULT_OPTIONS", LK_SHELL, "Option")
	sys("PKG_DELETE", LK_NONE, "ShellCommand")
	acl("PKG_DESTDIR_SUPPORT", LK_SHELL, "{ destdir user-destdir }", "Makefile:s", "Makefile.common:s")
	pkglist("PKG_FAIL_REASON", LK_SHELL, "ShellWord")
	acl("PKG_GECOS.*", LK_NONE, "Message", "Makefile:s")
	acl("PKG_GID.*", LK_NONE, "Integer", "Makefile:s")
	acl("PKG_GROUPS", LK_SHELL, "ShellWord", "Makefile:as")
	pkglist("PKG_GROUPS_VARS", LK_SHELL, "Varname")
	acl("PKG_HOME.*", LK_NONE, "Pathname", "Makefile:s")
	acl("PKG_HACKS", LK_SHELL, "Identifier", "hacks.mk:a")
	sys("PKG_INFO", LK_NONE, "ShellCommand")
	sys("PKG_JAVA_HOME", LK_NONE, "Pathname")
	jvms := "{ blackdown-jdk13 jdk jdk14 kaffe run-jdk13 sun-jdk14 sun-jdk15 sun-jdk6 openjdk7 openjdk7-bin sun-jdk7}"
	sys("PKG_JVM", LK_NONE, jvms)
	acl("PKG_JVMS_ACCEPTED", LK_SHELL, ""+jvms, "Makefile:s", "Makefile.common:ds")
	usr("PKG_JVM_DEFAULT", LK_NONE, jvms)
	acl("PKG_LEGACY_OPTIONS", LK_SHELL, "Option")
	acl("PKG_LIBTOOL", LK_NONE, "Pathname", "Makefile:s")
	acl("PKG_OPTIONS", LK_SPACE, "Option", "bsd.options.mk:s", "*:pu")
	usr("PKG_OPTIONS.*", LK_SPACE, "Option")
	acl("PKG_OPTIONS_DEPRECATED_WARNINGS", LK_SHELL, "ShellWord")
	acl("PKG_OPTIONS_GROUP.*", LK_SPACE, "Option", "options.mk:s", "Makefile:s")
	acl("PKG_OPTIONS_LEGACY_OPTS", LK_SPACE, "Unchecked", "Makefile:a", "Makefile.common:a", "options.mk:a")
	acl("PKG_OPTIONS_LEGACY_VARS", LK_SPACE, "Unchecked", "Makefile:a", "Makefile.common:a", "options.mk:a")
	acl("PKG_OPTIONS_NONEMPTY_SETS", LK_SPACE, "Identifier")
	acl("PKG_OPTIONS_OPTIONAL_GROUPS", LK_SPACE, "Identifier", "options.mk:as")
	acl("PKG_OPTIONS_REQUIRED_GROUPS", LK_SPACE, "Identifier", "options.mk:s", "Makefile:s")
	acl("PKG_OPTIONS_SET.*", LK_SPACE, "Option")
	acl("PKG_OPTIONS_VAR", LK_NONE, "PkgOptionsVar", "options.mk:s", "Makefile:s", "Makefile.common:s", "bsd.options.mk:p")
	acl("PKG_PRESERVE", LK_NONE, "Yes", "Makefile:s")
	acl("PKG_SHELL", LK_NONE, "Pathname", "Makefile:s", "Makefile.common:s")
	acl("PKG_SHELL.*", LK_NONE, "Pathname", "Makefile:s", "Makefile.common:s")
	acl("PKG_SHLIBTOOL", LK_NONE, "Pathname")
	pkglist("PKG_SKIP_REASON", LK_SHELL, "ShellWord")
	acl("PKG_SUGGESTED_OPTIONS", LK_SHELL, "Option", "options.mk:as", "Makefile:as", "Makefile.common:s")
	acl("PKG_SUPPORTED_OPTIONS", LK_SHELL, "Option", "options.mk:as", "Makefile:as", "Makefile.common:s")
	pkg("PKG_SYSCONFDIR*", LK_NONE, "Pathname")
	pkglist("PKG_SYSCONFDIR_PERMS", LK_SHELL, "ShellWord")
	sys("PKG_SYSCONFBASEDIR", LK_NONE, "Pathname")
	pkg("PKG_SYSCONFSUBDIR", LK_NONE, "Pathname")
	acl("PKG_SYSCONFVAR", LK_NONE, "Identifier")
	// ^^ FIXME: name/type mismatch.")
	acl("PKG_UID", LK_NONE, "Integer", "Makefile:s")
	acl("PKG_USERS", LK_SHELL, "ShellWord", "Makefile:as")
	pkg("PKG_USERS_VARS", LK_SHELL, "Varname")
	acl("PKG_USE_KERBEROS", LK_NONE, "Yes", "Makefile:s", "Makefile.common:s")
	//PLIST.*", "# has special handling code")
	pkglist("PLIST_VARS", LK_SHELL, "Identifier")
	pkglist("PLIST_SRC", LK_SHELL, "RelativePkgPath")
	pkglist("PLIST_SUBST", LK_SHELL, "ShellWord")
	acl("PLIST_TYPE", LK_NONE, "{ dynamic static }")
	acl("PREPEND_PATH", LK_SHELL, "Pathname")
	acl("PREFIX", LK_NONE, "Pathname", "*:u")
	acl("PREV_PKGPATH", LK_NONE, "Pathname", "*:u") // doesn't exist any longer
	acl("PRINT_PLIST_AWK", LK_NONE, "AwkCommand", "*:a")
	acl("PRIVILEGED_STAGES", LK_SHELL, "{ install package clean }")
	acl("PTHREAD_AUTO_VARS", LK_NONE, "YesNo", "Makefile:s")
	sys("PTHREAD_CFLAGS", LK_SHELL, "CFlag")
	sys("PTHREAD_LDFLAGS", LK_SHELL, "LdFlag")
	sys("PTHREAD_LIBS", LK_SHELL, "LdFlag")
	acl("PTHREAD_OPTS", LK_SHELL, "{ native optional require }", "Makefile:as", "Makefile.common:a", "buildlink3.mk:a")
	sys("PTHREAD_TYPE", LK_NONE, "Identifier")
	// ^^ or "native" or "none".
	pkg("PY_PATCHPLIST", LK_NONE, "Yes")
	acl("PYPKGPREFIX", LK_NONE, "{ py27 py33 py34 }", "*:pu", "pyversion.mk:s", "*:")
	pkg("PYTHON_FOR_BUILD_ONLY", LK_NONE, "Yes")
	pkglist("REPLACE_PYTHON", LK_SHELL, "Pathmask")
	pkg("PYTHON_VERSIONS_ACCEPTED", LK_SHELL, "Version")
	pkg("PYTHON_VERSIONS_INCOMPATIBLE", LK_SHELL, "Version")
	usr("PYTHON_VERSION_DEFAULT", LK_NONE, "Version")
	usr("PYTHON_VERSION_REQD", LK_NONE, "Version")
	pkglist("PYTHON_VERSIONED_DEPENDENCIES", LK_SHELL, "PythonDependency")
	sys("RANLIB", LK_NONE, "ShellCommand")
	pkglist("RCD_SCRIPTS", LK_SHELL, "Filename")
	acl("RCD_SCRIPT_SRC.*", LK_SHELL, "Pathname", "Makefile:s")
	acl("REPLACE.*", LK_NONE, "String", "Makefile:s")
	pkglist("REPLACE_AWK", LK_SHELL, "Pathmask")
	pkglist("REPLACE_BASH", LK_SHELL, "Pathmask")
	pkglist("REPLACE_CSH", LK_SHELL, "Pathmask")
	acl("REPLACE_EMACS", LK_SHELL, "Pathmask")
	acl("REPLACE_FILES.*", LK_SHELL, "Pathmask", "Makefile:as", "Makefile.common:as")
	acl("REPLACE_INTERPRETER", LK_SHELL, "Identifier", "Makefile:a", "Makefile.common:a")
	pkglist("REPLACE_KSH", LK_SHELL, "Pathmask")
	pkglist("REPLACE_LOCALEDIR_PATTERNS", LK_SHELL, "Filemask")
	pkglist("REPLACE_LUA", LK_SHELL, "Pathmask")
	pkglist("REPLACE_PERL", LK_SHELL, "Pathmask")
	pkglist("REPLACE_PYTHON", LK_SHELL, "Pathmask")
	pkglist("REPLACE_SH", LK_SHELL, "Pathmask")
	pkglist("REQD_DIRS", LK_SHELL, "Pathname")
	pkglist("REQD_DIRS_PERMS", LK_SHELL, "ShellWord")
	pkglist("REQD_FILES", LK_SHELL, "Pathname")
	pkg("REQD_FILES_MODE", LK_NONE, "{ 0644 0640 0600 0400 }")
	pkglist("REQD_FILES_PERMS", LK_SHELL, "ShellWord")
	pkg("RESTRICTED", LK_NONE, "Message")
	usr("ROOT_USER", LK_NONE, "UserGroupName")
	usr("ROOT_GROUP", LK_NONE, "UserGroupName")
	usr("RUBY_VERSION_REQD", LK_NONE, "Version")
	sys("RUN", LK_NONE, "ShellCommand")
	acl("SCRIPTS_ENV", LK_SHELL, "ShellWord", "Makefile:a", "Makefile.common:a")
	usr("SETUID_ROOT_PERMS", LK_SHELL, "ShellWord")
	sys("SHAREGRP", LK_NONE, "UserGroupName")
	sys("SHAREMODE", LK_NONE, "FileMode")
	sys("SHAREOWN", LK_NONE, "UserGroupName")
	sys("SHCOMMENT", LK_NONE, "ShellCommand")
	acl("SHLIB_HANDLING", LK_NONE, "{ YES NO no }")
	acl("SHLIBTOOL", LK_NONE, "ShellCommand")
	acl("SHLIBTOOL_OVERRIDE", LK_SHELL, "Pathmask", "Makefile:as", "Makefile.common:a")
	acl("SITES.*", LK_SHELL, "FetchURL", "Makefile:asu", "Makefile.common:asu", "options.mk:asu")
	pkglist("SPECIAL_PERMS", LK_SHELL, "ShellWord")
	sys("STEP_MSG", LK_NONE, "ShellCommand")
	acl("SUBDIR", LK_SHELL, "Filename", "Makefile:a", "*:")
	acl("SUBST_CLASSES", LK_SHELL, "Identifier", "Makefile:a", "Makefile.common:a", "hacks.mk:a", "Makefile.*:a")
	acl("SUBST_FILES.*", LK_SHELL, "Pathmask", "Makefile:as", "Makefile.common:as", "hacks.mk:as", "options.mk:as", "Makefile.*:as")
	acl("SUBST_FILTER_CMD.*", LK_NONE, "ShellCommand", "Makefile:s", "Makefile.common:s", "hacks.mk:s", "options.mk:s", "Makefile.*:s")
	acl("SUBST_MESSAGE.*", LK_NONE, "Message", "Makefile:s", "Makefile.common:s", "hacks.mk:s", "options.mk:s", "Makefile.*:s")
	acl("SUBST_SED.*", LK_NONE, "SedCommands", "Makefile:as", "Makefile.common:as", "hacks.mk:as", "options.mk:as", "Makefile.*:as")
	pkg("SUBST_STAGE.*", LK_NONE, "Stage")
	pkglist("SUBST_VARS.*", LK_SHELL, "Varname")
	pkglist("SUPERSEDES", LK_SPACE, "Dependency")
	pkglist("TEST_DIRS", LK_SHELL, "WrksrcSubdirectory")
	pkglist("TEST_ENV", LK_SHELL, "ShellWord")
	acl("TEST_TARGET", LK_SHELL, "Identifier", "Makefile:s", "Makefile.common:ds", "options.mk:as")
	acl("TEX_ACCEPTED", LK_SHELL, "{ teTeX1 teTeX2 teTeX3 }", "Makefile:s", "Makefile.common:s")
	acl("TEX_DEPMETHOD", LK_NONE, "{ build run }", "Makefile:s", "Makefile.common:s")
	pkglist("TEXINFO_REQD", LK_SHELL, "Version")
	acl("TOOL_DEPENDS", LK_SPACE, "DependencyWithPath", "Makefile.common:a", "Makefile:a", "options.mk:a", "*.mk:a")
	sys("TOOLS_ALIASES", LK_SHELL, "Filename")
	sys("TOOLS_BROKEN", LK_SHELL, "Tool")
	sys("TOOLS_CREATE", LK_SHELL, "Tool")
	sys("TOOLS_DEPENDS.*", LK_SPACE, "DependencyWithPath")
	sys("TOOLS_GNU_MISSING", LK_SHELL, "Tool")
	sys("TOOLS_NOOP", LK_SHELL, "Tool")
	sys("TOOLS_PATH.*", LK_NONE, "Pathname")
	sys("TOOLS_PLATFORM.*", LK_NONE, "ShellCommand")
	sys("TOUCH_FLAGS", LK_SHELL, "ShellWord")
	pkglist("UAC_REQD_EXECS", LK_SHELL, "PrefixPathname")
	acl("UNLIMIT_RESOURCES", LK_SHELL, "{ datasize stacksize memorysize }", "Makefile:as", "Makefile.common:a")
	usr("UNPRIVILEGED_USER", LK_NONE, "UserGroupName")
	usr("UNPRIVILEGED_GROUP", LK_NONE, "UserGroupName")
	pkglist("UNWRAP_FILES", LK_SHELL, "Pathmask")
	usr("UPDATE_TARGET", LK_SHELL, "Identifier")
	pkg("USE_BSD_MAKEFILE", LK_NONE, "Yes")
	acl("USE_BUILTIN.*", LK_NONE, "YesNo_Indirectly", "builtin.mk:s")
	pkg("USE_CMAKE", LK_NONE, "Yes")
	acl("USE_CROSSBASE", LK_NONE, "Yes", "Makefile:s")
	pkg("USE_FEATURES", LK_SHELL, "Identifier")
	pkg("USE_GCC_RUNTIME", LK_NONE, "YesNo")
	pkg("USE_GNU_CONFIGURE_HOST", LK_NONE, "YesNo")
	acl("USE_GNU_ICONV", LK_NONE, "Yes", "Makefile:s", "Makefile.common:s", "options.mk:s")
	acl("USE_IMAKE", LK_NONE, "Yes", "Makefile:s")
	pkg("USE_JAVA", LK_NONE, "{ run yes build }")
	pkg("USE_JAVA2", LK_NONE, "{ YES yes no 1.4 1.5 6 7 8 }")
	acl("USE_LANGUAGES", LK_SHELL, "{ ada c c99 c++ fortran fortran77 java objc }", "Makefile:s", "Makefile.common:s", "options.mk:s")
	pkg("USE_LIBTOOL", LK_NONE, "Yes")
	pkg("USE_MAKEINFO", LK_NONE, "Yes")
	pkg("USE_MSGFMT_PLURALS", LK_NONE, "Yes")
	pkg("USE_NCURSES", LK_NONE, "Yes")
	pkg("USE_OLD_DES_API", LK_NONE, "YesNo")
	pkg("USE_PKGINSTALL", LK_NONE, "Yes")
	pkg("USE_PKGLOCALEDIR", LK_NONE, "YesNo")
	usr("USE_PKGSRC_GCC", LK_NONE, "Yes")
	acl("USE_TOOLS", LK_SHELL, "Tool", "*:a")
	pkg("USE_X11", LK_NONE, "Yes")
	sys("WARNING_MSG", LK_NONE, "ShellCommand")
	sys("WARNING_CAT", LK_NONE, "ShellCommand")
	acl("WRAPPER_REORDER_CMDS", LK_SHELL, "WrapperReorder", "buildlink3.mk:a", "Makefile.common:a", "Makefile:a")
	acl("WRAPPER_TRANSFORM_CMDS", LK_SHELL, "WrapperTransform", "buildlink3.mk:a", "Makefile.common:a", "Makefile:a")
	sys("WRKDIR", LK_NONE, "Pathname")
	pkg("WRKSRC", LK_NONE, "WrkdirSubdirectory")
	sys("X11_PKGSRCDIR.*", LK_NONE, "Pathname")
	usr("XAW_TYPE", LK_NONE, "{ 3d neXtaw standard xpm }")
	acl("XMKMF_FLAGS", LK_SHELL, "ShellWord")
}
