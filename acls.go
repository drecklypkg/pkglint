package pkglint

// This file defines the specific type of some variables, according to
// their current use in pkgsrc.
//
// The type YesNo is used for variables that are checked using
//     .if defined(VAR) && !empty(VAR:M[Yy][Ee][Ss])
//
// The type Yes is used for variables that are checked using
//     .if defined(VAR)
//
// The type List is used for lists of things. There are two types of lists,
// InternalList and List, which are described in the pkgsrc guide, chapter
// "Makefiles".
//
// The other types are described in pkglint.pl, checkline_mk_vartype_basic.
//
// Last synced with mk/defaults/mk.conf revision 1.118

func acl(varname string, vartype string, aclentries ...string) {
}

// A package-defined variable may be set in all Makefiles except buildlink3.mk and builtin.mk.
func pkg(varname, vartype string) {
	acl(varname, vartype, "Makefile:su", "Makefile.common:dsu", "buildlink3.mk:", "builtin.mk:", "*.mk:dsu")
}

// A package-defined list may be appended to in all Makefiles except buildlink3.mk and builtin.mk.
// Simple assignment (instead of appending) is only allowed in Makefile and Makefile.common.
func pkglist(varname, vartype string) {
	acl(varname, vartype, "Makefile:asu", "Makefile.common:asu", "buildlink3.mk:", "builtin.mk:", "*.mk:au")
}

// A user-defined or system-defined variable must not be set by any
// package file. It also must not be used in buildlink3.mk and
// builtin.mk files or at load-time, since the system/user preferences
// may not have been loaded when these files are included.
func sys(varname, vartype string) {
	acl(varname, vartype, "buildlink3.mk:", "builtin.mk:", "*:u")
}
func usr(varname, vartype string) {
	acl(varname, vartype, "buildlink3.mk:", "builtin.mk:", "*:u")
}
func bl3list(varname, vartype string) {
	acl(varname, vartype, "buildlink3.mk:a", "builtin.mk:a")
}
func cmdline(varname, vartype string) {
	acl(varname, vartype, "buildlink3.mk:", "builtin.mk:", "*:pu")
}

func initacls() {
	usr("ALLOW_VULNERABLE_PACKAGES", "Yes")
	usr("MANINSTALL", "List of { maninstall catinstall }")
	usr("MANZ", "Yes")
	usr("GZIP", "List of ShellWord")
	usr("MKCRYPTO", "YesNo")
	usr("OBJHOSTNAME", "Yes")
	usr("OBJMACHINE", "Yes")
	usr("PKG_SUFX", "Filename")
	usr("PKGSRC_LOCKTYPE", "{ none sleep once }")
	usr("PKGSRC_SLEEPSECS", "Integer")
	usr("USETBL", "Yes")
	usr("ABI", "{ 32 64 }")
	usr("PKG_DEVELOPER", "Yes")
	usr("USE_ABI_DEPENDS", "YesNo")
	usr("PKG_REGISTER_SHELLS", "{ YES NO }")
	usr("PKGSRC_COMPILER", "List of { ccache ccc clang distcc f2c gcc hp icc ido gcc mipspro mipspro-ucode pcc sunpro xlc }")
	usr("PKGSRC_MESSAGE_RECIPIENTS", "List of Mail_Address")
	usr("PKGSRC_SHOW_BUILD_DEFS", "YesNo")
	usr("PKGSRC_SHOW_PATCH_ERRORMSG", "YesNo")
	usr("PKGSRC_RUN_TEST", "YesNo")
	usr("PREFER_PKGSRC", "List of Identifier")
	usr("PREFER_NATIVE", "List of Identifier")
	usr("PREFER_NATIVE_PTHREADS", "YesNo")
	usr("LOCALBASE", "Pathname")
	usr("CROSSBASE", "Pathname")
	usr("VARBASE", "Pathname")
	usr("X11_TYPE", "{ modular native }")
	usr("X11BASE", "Pathname")
	usr("MOTIFBASE", "Pathname")
	usr("PKGINFODIR", "Pathname")
	usr("PKGMANDIR", "Pathname")
	usr("USE_XPKGWEDGE", "YesNo")
	usr("BSDSRCDIR", "Pathname")
	usr("BSDXSRCDIR", "Pathname")
	usr("DISTDIR", "Pathname")
	usr("DIST_PATH", "Pathlist")
	usr("DEFAULT_VIEW", "Unchecked")
	usr("FETCH_CMD", "ShellCommand")
	usr("FETCH_USING", "{ curl custom fetch ftp manual wget }")
	usr("FETCH_RESUME_ARGS", "List of ShellWord")
	usr("FETCH_OUTPUT_ARGS", "List of ShellWord")
	usr("LIBTOOLIZE_PLIST", "YesNo")
	usr("PKG_RESUME_TRANSFERS", "YesNo")
	usr("PKG_SYSCONFBASE", "Pathname")
	usr("RCD_SCRIPTS_DIR", "Pathname")
	usr("PACKAGES", "Pathname")
	usr("PKGVULNDIR", "Pathname")
	usr("PASSIVE_FETCH", "Yes")
	usr("PATCH_FUZZ_FACTOR", "{ -F0 -F1 -F2 -F3 }")
	usr("ACCEPTABLE_LICENSES", "List of Identifier")
	usr("SPECIFIC_PKGS", "Yes")
	usr("SITE_SPECIFIC_PKGS", "List of PkgPath")
	usr("HOST_SPECIFIC_PKGS", "List of PkgPath")
	usr("GROUP_SPECIFIC_PKGS", "List of PkgPath")
	usr("USER_SPECIFIC_PKGS", "List of PkgPath")
	usr("FAILOVER_FETCH", "Yes")
	usr("MASTER_SORT", "List of Unchecked")
	usr("MASTER_SORT_REGEX", "List of Unchecked")
	usr("PATCH_DEBUG", "Yes")
	usr("PKG_FC", "ShellCommand")
	usr("IMAKE", "ShellCommand")
	usr("IMAKEOPTS", "List of ShellWord")
	usr("PRE_ROOT_CMD", "ShellCommand")
	pkg("USE_GAMESGROUP", "YesNo")
	usr("SU_CMD", "ShellCommand")
	usr("SU_CMD_PATH_APPEND", "Pathlist")
	usr("FATAL_OBJECT_FMT_SKEW", "YesNo")
	usr("WARN_NO_OBJECT_FMT", "YesNo")
	usr("SMART_MESSAGES", "Yes")
	usr("BINPKG_SITES", "List of URL")
	usr("BIN_INSTALL_FLAG", "List of ShellWord")
	usr("LOCALPATCHES", "Pathname")

	// some other variables, sorted alphabetically

	sys(".CURDIR", "Pathname")
	sys(".TARGET", "Pathname")
	acl("ALL_ENV", "List of ShellWord")
	acl("ALTERNATIVES_FILE", "Filename")
	acl("ALTERNATIVES_SRC", "List of Pathname")
	pkg("APACHE_MODULE", "Yes")
	sys("AR", "ShellCommand")
	sys("AS", "ShellCommand")
	pkglist("AUTOCONF_REQD", "List of Version")
	acl("AUTOMAKE_OVERRIDE", "List of Pathmask")
	pkglist("AUTOMAKE_REQD", "List of Version")
	pkg("AUTO_MKDIRS", "YesNo")
	usr("BATCH", "Yes")
	acl("BDB185_DEFAULT", "Unchecked")
	sys("BDBBASE", "Pathname")
	pkg("BDB_ACCEPTED", "List of { db1 db2 db3 db4 db5 }")
	acl("BDB_DEFAULT", "{ db1 db2 db3 db4 db5 }")
	sys("BDB_LIBS", "List of LdFlag")
	sys("BDB_TYPE", "{ db1 db2 db3 db4 db5 }")
	sys("BINGRP", "UserGroupName")
	sys("BINMODE", "FileMode")
	sys("BINOWN", "UserGroupName")
	acl("BOOTSTRAP_DEPENDS", "InternalList of DependencyWithPath", "c:a,m:a,o:a,*.mk:a")
	pkg("BOOTSTRAP_PKG", "YesNo")
	acl("BROKEN", "Message", "")
	pkg("BROKEN_GETTEXT_DETECTION", "YesNo")
	pkglist("BROKEN_EXCEPT_ON_PLATFORM", "List of PlatformTriple")
	pkglist("BROKEN_ON_PLATFORM", "InternalList of PlatformTriple")
	sys("BSD_MAKE_ENV", "List of ShellWord")
	acl("BUILDLINK_ABI_DEPENDS.*", "InternalList of Dependency", "*:a")
	acl("BUILDLINK_API_DEPENDS.*", "InternalList of Dependency", "*:a")
	acl("BUILDLINK_CONTENTS_FILTER", "List of ShellWord")
	// ^^ should rather be ShellCommand
	sys("BUILDLINK_CFLAGS", "List of CFlag")
	bl3list("BUILDLINK_CFLAGS.*", "List of CFlag")
	sys("BUILDLINK_CPPFLAGS", "List of CFlag")
	bl3list("BUILDLINK_CPPFLAGS.*", "List of CFlag")
	acl("BUILDLINK_CONTENTS_FILTER.*", "ShellCommand", "b:s")
	acl("BUILDLINK_DEPENDS", "InternalList of Identifier", "b:a")
	acl("BUILDLINK_DEPMETHOD.*", "List of BuildlinkDepmethod", "b:ad,m:as,c:a,*.mk:a")
	// ^^ FIXME: b:d may lead to unexpected behavior.
	acl("BUILDLINK_DEPTH", "BuildlinkDepth", "b:ps, builtin.mk:ps")
	sys("BUILDLINK_DIR", "Pathname")
	bl3list("BUILDLINK_FILES.*", "List of Pathmask")
	acl("BUILDLINK_FILES_CMD.*", "List of ShellWord")
	// ^^ ShellCommand
	acl("BUILDLINK_INCDIRS.*", "List of Pathname", "b:ad]") // b:d?
	acl("BUILDLINK_JAVA_PREFIX.*", "Pathname", "b:s")
	acl("BUILDLINK_LDADD.*", "List of LdFlag", "builtin.mk:adsu, b:, m:u, c:u, *.mk:u")
	sys("BUILDLINK_LDFLAGS", "List of LdFlag")
	bl3list("BUILDLINK_LDFLAGS.*", "List of LdFlag")
	bl3list("BUILDLINK_LIBDIRS.*", "List of Pathname")
	acl("BUILDLINK_LIBS.*", "List of LdFlag", "b:a")
	acl("BUILDLINK_PACKAGES", "BuildlinkPackages", "b:aps")
	acl("BUILDLINK_PASSTHRU_DIRS", "List of Pathname", "m:a,c:a,b:a,h:a")
	acl("BUILDLINK_PASSTHRU_RPATHDIRS", "List of Pathname", "m:a,c:a,b:a,h:a")
	acl("BUILDLINK_PKGSRCDIR.*", "RelativePkgDir", "b:dp")
	acl("BUILDLINK_PREFIX.*", "Pathname", "builtin.mk:su, b:, m:u, c:u, *.mk:u")
	acl("BUILDLINK_RPATHDIRS.*", "List of Pathname", "b:a")
	acl("BUILDLINK_TARGETS", "List of Identifier")
	acl("BUILDLINK_FNAME_TRANSFORM.*", "SedCommands", "m:a,builtin.mk:a,h:a,b:a")
	acl("BUILDLINK_TRANSFORM", "List of WrapperTransform", "*:a")
	acl("BUILDLINK_TREE", "List of Identifier", "b:a")
	acl("BUILD_DEFS", "List of Varname", "m:a,c:a,o:a")
	acl("BUILD_DEPENDS", "InternalList of DependencyWithPath", "c:a,m:a,o:a,*.mk:a")
	pkglist("BUILD_DIRS", "List of WrksrcSubdirectory")
	pkglist("BUILD_ENV", "List of ShellWord")
	sys("BUILD_MAKE_CMD", "ShellCommand")
	pkglist("BUILD_MAKE_FLAGS", "List of ShellWord")
	pkg("BUILD_TARGET", "List of Identifier")
	pkg("BUILD_USES_MSGFMT", "Yes")
	acl("BUILTIN_PKG", "Identifier", "builtin.mk:psu")
	acl("BUILTIN_PKG.*", "PkgName", "builtin.mk:psu")
	acl("BUILTIN_FIND_FILES_VAR", "List of Varname", "builtin.mk:s")
	acl("BUILTIN_FIND_FILES.*", "List of Pathname", "builtin.mk:s")
	acl("BUILTIN_FIND_GREP.*", "String", "builtin.mk:s")
	acl("BUILTIN_FIND_LIBS", "List of Pathname", "builtin.mk:s")
	acl("BUILTIN_IMAKE_CHECK", "List of Unchecked", "builtin.mk:s")
	acl("BUILTIN_IMAKE_CHECK.*", "YesNo")
	sys("BUILTIN_X11_TYPE", "Unchecked")
	sys("BUILTIN_X11_VERSION", "Unchecked")
	acl("CATEGORIES", "List of Category", "m:as,c:ads")
	sys("CC_VERSION", "Message")
	sys("CC", "ShellCommand")
	pkglist("CFLAGS*", "List of CFlag")
	// ^^ may also be changed by the user
	acl("CHECK_BUILTIN", "YesNo", "builtin.mk:d,m:s")
	acl("CHECK_BUILTIN.*", "YesNo", "*:p")
	acl("CHECK_FILES_SKIP", "List of Pathmask", "m:a,c:a")
	pkg("CHECK_FILES_SUPPORTED", "YesNo")
	usr("CHECK_HEADERS", "YesNo")
	pkglist("CHECK_HEADERS_SKIP", "List of Pathmask")
	usr("CHECK_INTERPRETER", "YesNo")
	pkglist("CHECK_INTERPRETER_SKIP", "List of Pathmask")
	usr("CHECK_PERMS", "YesNo")
	pkglist("CHECK_PERMS_SKIP", "List of Pathmask")
	//CHECK_PERMS_AUTOFIX", "YesNo", pkg...)
	// ^^ experimental
	usr("CHECK_PORTABILITY", "YesNo")
	pkglist("CHECK_PORTABILITY_SKIP", "List of Pathmask")
	acl("CHECK_SHLIBS", "YesNo", "m:s")
	pkglist("CHECK_SHLIBS_SKIP", "List of Pathmask")
	acl("CHECK_SHLIBS_SUPPORTED", "YesNo", "m:s")
	pkglist("CHECK_WRKREF_SKIP", "List of Pathmask")
	pkg("CMAKE_ARG_PATH", "Pathname")
	pkglist("CMAKE_ARGS", "List of ShellWord")
	acl("COMMENT", "Comment", "m:as,c:as")
	sys("COMPILER_RPATH_FLAG", "{ -Wl,-rpath }")
	pkglist("CONFIGURE_ARGS", "List of ShellWord")
	pkglist("CONFIGURE_DIRS", "List of WrksrcSubdirectory")
	pkglist("CONFIGURE_ENV", "List of ShellWord")
	pkg("CONFIGURE_HAS_INFODIR", "YesNo")
	pkg("CONFIGURE_HAS_LIBDIR", "YesNo")
	pkg("CONFIGURE_HAS_MANDIR", "YesNo")
	pkg("CONFIGURE_SCRIPT", "Pathname")
	acl("CONFIG_GUESS_OVERRIDE", "List of Pathmask", "m:as,c:as")
	acl("CONFIG_STATUS_OVERRIDE", "List of Pathmask", "m:as,c:as")
	acl("CONFIG_SHELL", "Pathname", "m:s,c:s")
	acl("CONFIG_SUB_OVERRIDE", "List of Pathmask", "m:as,c:as")
	pkglist("CONFLICTS", "InternalList of Dependency")
	pkglist("CONF_FILES", "List of ShellWord")
	pkg("CONF_FILES_MODE", "{ 0644 0640 0600 0400 }")
	pkglist("CONF_FILES_PERMS", "List of ShellWord")
	sys("COPY", "{ -c }")
	// ^^ the flag that tells ${INSTALL} to copy a file
	sys("CPP", "ShellCommand")
	pkglist("CPPFLAGS*", "List of CFlag")
	acl("CRYPTO", "Yes", "m:s")
	sys("CXX", "ShellCommand")
	pkglist("CXXFLAGS*", "List of CFlag")
	acl("DEINSTALL_FILE", "Pathname", "m:s")
	acl("DEINSTALL_SRC", "List of Pathname", "m:s,c:ds")
	acl("DEINSTALL_TEMPLATES", "List of Pathname", "m:as,c:ads")
	sys("DELAYED_ERROR_MSG", "ShellCommand")
	sys("DELAYED_WARNING_MSG", "ShellCommand")
	pkglist("DEPENDS", "InternalList of DependencyWithPath")
	usr("DEPENDS_TARGET", "List of Identifier")
	acl("DESCR_SRC", "List of Pathname", "m:s,c:ds")
	sys("DESTDIR", "Pathname")
	acl("DESTDIR_VARNAME", "Varname", "m:s,c:s")
	sys("DEVOSSAUDIO", "Pathname")
	sys("DEVOSSSOUND", "Pathname")
	pkglist("DISTFILES", "List of Filename")
	pkg("DISTINFO_FILE", "RelativePkgPath")
	pkg("DISTNAME", "Filename")
	pkg("DIST_SUBDIR", "Pathname")
	acl("DJB_BUILD_ARGS", "List of ShellWord")
	acl("DJB_BUILD_TARGETS", "List of Identifier")
	acl("DJB_CONFIG_CMDS", "List of ShellWord", "o:s")
	// ^^ ShellCommand, terminated by a semicolon
	acl("DJB_CONFIG_DIRS", "List of WrksrcSubdirectory")
	acl("DJB_CONFIG_HOME", "Filename")
	acl("DJB_CONFIG_PREFIX", "Pathname")
	acl("DJB_INSTALL_TARGETS", "List of Identifier")
	acl("DJB_MAKE_TARGETS", "YesNo")
	acl("DJB_RESTRICTED", "YesNo", "m:s")
	acl("DJB_SLASHPACKAGE", "YesNo")
	acl("DLOPEN_REQUIRE_PTHREADS", "YesNo")
	acl("DL_AUTO_VARS", "Yes", "m:s,c:s,o:s")
	acl("DL_LIBS", "List of LdFlag")
	sys("DOCOWN", "UserGroupName")
	sys("DOCGRP", "UserGroupName")
	sys("DOCMODE", "FileMode")
	sys("DOWNLOADED_DISTFILE", "Pathname")
	sys("DO_NADA", "ShellCommand")
	pkg("DYNAMIC_SITES_CMD", "ShellCommand")
	pkg("DYNAMIC_SITES_SCRIPT", "Pathname")
	sys("ECHO", "ShellCommand")
	sys("ECHO_MSG", "ShellCommand")
	sys("ECHO_N", "ShellCommand")
	pkg("EGDIR", "Pathname")
	// ^^ This variable is not defined by the system, but has been established
	// as a convention.
	sys("EMACS_BIN", "Pathname")
	sys("EMACS_ETCPREFIX", "Pathname")
	sys("EMACS_FLAVOR", "{ emacs xemacs }")
	sys("EMACS_INFOPREFIX", "Pathname")
	sys("EMACS_LISPPREFIX", "Pathname")
	acl("EMACS_MODULES", "List of Identifier", "m:as,c:as")
	sys("EMACS_PKGNAME_PREFIX", "Identifier")
	// ^^ or the empty string.
	sys("EMACS_TYPE", "{ emacs xemacs }")
	acl("EMACS_USE_LEIM", "Yes")
	acl("EMACS_VERSIONS_ACCEPTED", "List of { emacs25 emacs24 emacs24nox emacs23 emacs23nox emacs22 emacs22nox emacs21 emacs21nox emacs20 xemacs215 xemacs215nox xemacs214 xemacs214nox}", "m:s")
	sys("EMACS_VERSION_MAJOR", "Integer")
	sys("EMACS_VERSION_MINOR", "Integer")
	acl("EMACS_VERSION_REQD", "List of { emacs24 emacs24nox emacs23 emacs23nox emacs22 emacs22nox emacs21 emacs21nox emacs20 xemacs215 xemacs214 }", "m:as")
	sys("EMULDIR", "Pathname")
	sys("EMULSUBDIR", "Pathname")
	sys("OPSYS_EMULDIR", "Pathname")
	sys("EMULSUBDIRSLASH", "Pathname")
	sys("EMUL_ARCH", "{ i386 none }")
	sys("EMUL_DISTRO", "Identifier")
	sys("EMUL_IS_NATIVE", "Yes")
	pkg("EMUL_MODULES.*", "List of Identifier")
	sys("EMUL_OPSYS", "{ freebsd hpux irix linux osf1 solaris sunos none }")
	pkg("EMUL_PKG_FMT", "{ plain rpm }")
	usr("EMUL_PLATFORM", "EmulPlatform")
	pkg("EMUL_PLATFORMS", "List of EmulPlatform")
	usr("EMUL_PREFER", "List of EmulPlatform")
	pkg("EMUL_REQD", "InternalList of Dependency")
	usr("EMUL_TYPE.*", "{ native builtin suse suse-9.1 suse-9.x suse-10.0 suse-10.x }")
	sys("ERROR_CAT", "ShellCommand")
	sys("ERROR_MSG", "ShellCommand")
	acl("EVAL_PREFIX", "InternalList of ShellWord", "m:a,c:a")
	// ^^ FIXME: Looks like a type mismatch.
	sys("EXPORT_SYMBOLS_LDFLAGS", "List of LdFlag")
	sys("EXTRACT_CMD", "ShellCommand")
	pkg("EXTRACT_DIR", "Pathname")
	pkglist("EXTRACT_ELEMENTS", "List of Pathmask")
	pkglist("EXTRACT_ENV", "List of ShellWord")
	pkglist("EXTRACT_ONLY", "List of Pathname")
	acl("EXTRACT_OPTS", "List of ShellWord", "m:as,c:as")
	acl("EXTRACT_OPTS_BIN", "List of ShellWord", "m:as,c:as")
	acl("EXTRACT_OPTS_LHA", "List of ShellWord", "m:as,c:as")
	acl("EXTRACT_OPTS_PAX", "List of ShellWord", "m:as,c:as")
	acl("EXTRACT_OPTS_RAR", "List of ShellWord", "m:as,c:as")
	acl("EXTRACT_OPTS_TAR", "List of ShellWord", "m:as,c:as")
	acl("EXTRACT_OPTS_ZIP", "List of ShellWord", "m:as,c:as")
	acl("EXTRACT_OPTS_ZOO", "List of ShellWord", "m:as,c:as")
	pkg("EXTRACT_SUFX", "DistSuffix")
	pkg("EXTRACT_USING", "{ bsdtar gtar nbtar pax }")
	sys("FAIL_MSG", "ShellCommand")
	sys("FAMBASE", "Pathname")
	pkg("FAM_ACCEPTED", "List of { fam gamin }")
	usr("FAM_DEFAULT", "{ fam gamin }")
	sys("FAM_TYPE", "{ fam gamin }")
	acl("FETCH_BEFORE_ARGS", "List of ShellWord", "m:as")
	pkglist("FETCH_MESSAGE", "List of ShellWord")
	pkg("FILESDIR", "RelativePkgPath")
	pkglist("FILES_SUBST", "List of ShellWord")
	acl("FILES_SUBST_SED", "List of ShellWord")
	pkglist("FIX_RPATH", "List of Varname")
	pkglist("FLEX_REQD", "List of Version")
	acl("FONTS_DIRS.*", "List of Pathname", "m:as,c:a")
	sys("GAMEDATAMODE", "FileMode")
	sys("GAMES_GROUP", "UserGroupName")
	sys("GAMEMODE", "FileMode")
	sys("GAMES_USER", "UserGroupName")
	pkglist("GCC_REQD", "List of Version")
	pkglist("GENERATE_PLIST", "List of ShellWord")
	// ^^ List of Shellcommand, terminated with a semicolon
	pkg("GITHUB_PROJECT", "Identifier")
	pkg("GITHUB_TAG", "Identifier")
	pkg("GITHUB_RELEASE", "Filename")
	pkg("GITHUB_TYPE", "{ tag release }")
	acl("GNU_ARCH", "{ mips }")
	acl("GNU_CONFIGURE", "Yes", "c:s,m:s")
	acl("GNU_CONFIGURE_INFODIR", "Pathname", "m:s,c:s")
	acl("GNU_CONFIGURE_LIBDIR", "Pathname", "m:s,c:s")
	pkg("GNU_CONFIGURE_LIBSUBDIR", "Pathname")
	acl("GNU_CONFIGURE_MANDIR", "Pathname", "m:s,c:s")
	acl("GNU_CONFIGURE_PREFIX", "Pathname", "m:s")
	acl("HAS_CONFIGURE", "Yes", "m:s,c:s")
	pkglist("HEADER_TEMPLATES", "List of Pathname")
	pkg("HOMEPAGE", "URL")
	acl("IGNORE_PKG.*", "Yes", "*:sp")
	acl("INCOMPAT_CURSES", "InternalList of PlatformTriple", "m:as")
	acl("INCOMPAT_ICONV", "InternalList of PlatformTriple")
	acl("INFO_DIR", "Pathname")
	// ^^ relative to PREFIX")
	pkg("INFO_FILES", "Yes")
	sys("INSTALL", "ShellCommand")
	pkglist("INSTALLATION_DIRS", "List of PrefixPathname")
	pkg("INSTALLATION_DIRS_FROM_PLIST", "Yes")
	sys("INSTALL_DATA", "ShellCommand")
	sys("INSTALL_DATA_DIR", "ShellCommand")
	pkglist("INSTALL_DIRS", "List of WrksrcSubdirectory")
	pkglist("INSTALL_ENV", "List of ShellWord")
	acl("INSTALL_FILE", "Pathname", "m:s")
	sys("INSTALL_GAME", "ShellCommand")
	sys("INSTALL_GAME_DATA", "ShellCommand")
	sys("INSTALL_LIB", "ShellCommand")
	sys("INSTALL_LIB_DIR", "ShellCommand")
	pkglist("INSTALL_MAKE_FLAGS", "List of ShellWord")
	sys("INSTALL_MAN", "ShellCommand")
	sys("INSTALL_MAN_DIR", "ShellCommand")
	sys("INSTALL_PROGRAM", "ShellCommand")
	sys("INSTALL_PROGRAM_DIR", "ShellCommand")
	sys("INSTALL_SCRIPT", "ShellCommand")
	acl("INSTALL_SCRIPTS_ENV", "List of ShellWord")
	sys("INSTALL_SCRIPT_DIR", "ShellCommand")
	acl("INSTALL_SRC", "List of Pathname", "m:s,c:ds")
	pkg("INSTALL_TARGET", "List of Identifier")
	acl("INSTALL_TEMPLATES", "List of Pathname", "m:as,c:ads")
	acl("INSTALL_UNSTRIPPED", "YesNo", "m:s,c:s")
	pkg("INTERACTIVE_STAGE", "List of { fetch extract configure build install }")
	acl("IS_BUILTIN.*", "YesNo_Indirectly", "builtin.mk:psu")
	sys("JAVA_BINPREFIX", "Pathname")
	pkg("JAVA_CLASSPATH", "ShellWord")
	pkg("JAVA_HOME", "Pathname")
	pkg("JAVA_NAME", "Filename")
	pkglist("JAVA_UNLIMIT", "List of { cmdsize datasize stacksize }")
	pkglist("JAVA_WRAPPERS", "InternalList of Filename")
	pkg("JAVA_WRAPPER_BIN.*", "Pathname")
	sys("KRB5BASE", "Pathname")
	acl("KRB5_ACCEPTED", "List of { heimdal mit-krb5 }")
	usr("KRB5_DEFAULT", "{ heimdal mit-krb5 }")
	sys("KRB5_TYPE", "Unchecked")
	sys("LD", "ShellCommand")
	pkglist("LDFLAGS*", "List of LdFlag")
	sys("LIBGRP", "UserGroupName")
	sys("LIBMODE", "FileMode")
	sys("LIBOWN", "UserGroupName")
	sys("LIBOSSAUDIO", "Pathname")
	pkglist("LIBS*", "List of LdFlag")
	sys("LIBTOOL", "ShellCommand")
	acl("LIBTOOL_OVERRIDE", "List of Pathmask", "m:as")
	pkglist("LIBTOOL_REQD", "List of Version")
	acl("LICENCE", "License", "m:s,c:s,o:s")
	acl("LICENSE", "License", "m:s,c:s,o:s")
	pkg("LICENSE_FILE", "Pathname")
	sys("LINKER_RPATH_FLAG", "ShellWord")
	sys("LOWER_OPSYS", "Identifier")
	acl("LTCONFIG_OVERRIDE", "List of Pathmask", "m:as,c:a")
	sys("MACHINE_ARCH", "Identifier")
	sys("MACHINE_GNU_PLATFORM", "PlatformTriple")
	acl("MAINTAINER", "Mail_Address", "m:s,c:d")
	sys("MAKE", "ShellCommand")
	pkglist("MAKEFLAGS", "List of ShellWord")
	acl("MAKEVARS", "List of Varname", "builtin.mk:a,b:a,h:a")
	pkglist("MAKE_DIRS", "List of Pathname")
	pkglist("MAKE_DIRS_PERMS", "List of ShellWord")
	pkglist("MAKE_ENV", "List of ShellWord")
	pkg("MAKE_FILE", "Pathname")
	pkglist("MAKE_FLAGS", "List of ShellWord")
	usr("MAKE_JOBS", "Integer")
	pkg("MAKE_JOBS_SAFE", "YesNo")
	pkg("MAKE_PROGRAM", "ShellCommand")
	acl("MANCOMPRESSED", "YesNo", "m:s,c:ds")
	acl("MANCOMPRESSED_IF_MANZ", "Yes", "m:s,c:ds")
	sys("MANGRP", "UserGroupName")
	sys("MANMODE", "FileMode")
	sys("MANOWN", "UserGroupName")
	pkglist("MASTER_SITES", "List of FetchURL")
	sys("MASTER_SITE_APACHE", "List of FetchURL")
	sys("MASTER_SITE_BACKUP", "List of FetchURL")
	sys("MASTER_SITE_CYGWIN", "List of FetchURL")
	sys("MASTER_SITE_DEBIAN", "List of FetchURL")
	sys("MASTER_SITE_FREEBSD", "List of FetchURL")
	sys("MASTER_SITE_FREEBSD_LOCAL", "List of FetchURL")
	sys("MASTER_SITE_GENTOO", "List of FetchURL")
	sys("MASTER_SITE_GITHUB", "List of FetchURL")
	sys("MASTER_SITE_GNOME", "List of FetchURL")
	sys("MASTER_SITE_GNU", "List of FetchURL")
	sys("MASTER_SITE_GNUSTEP", "List of FetchURL")
	sys("MASTER_SITE_IFARCHIVE", "List of FetchURL")
	sys("MASTER_SITE_HASKELL_HACKAGE", "List of FetchURL")
	sys("MASTER_SITE_KDE", "List of FetchURL")
	sys("MASTER_SITE_LOCAL", "List of FetchURL")
	sys("MASTER_SITE_MOZILLA", "List of FetchURL")
	sys("MASTER_SITE_MOZILLA_ALL", "List of FetchURL")
	sys("MASTER_SITE_MOZILLA_ESR", "List of FetchURL")
	sys("MASTER_SITE_MYSQL", "List of FetchURL")
	sys("MASTER_SITE_NETLIB", "List of FetchURL")
	sys("MASTER_SITE_OPENOFFICE", "List of FetchURL")
	sys("MASTER_SITE_OSDN", "List of FetchURL")
	sys("MASTER_SITE_PERL_CPAN", "List of FetchURL")
	sys("MASTER_SITE_R_CRAN", "List of FetchURL")
	sys("MASTER_SITE_RUBYGEMS", "List of FetchURL")
	sys("MASTER_SITE_SOURCEFORGE", "List of FetchURL")
	sys("MASTER_SITE_SUNSITE", "List of FetchURL")
	sys("MASTER_SITE_SUSE", "List of FetchURL")
	sys("MASTER_SITE_TEX_CTAN", "List of FetchURL")
	sys("MASTER_SITE_XCONTRIB", "List of FetchURL")
	sys("MASTER_SITE_XEMACS", "List of FetchURL")
	pkglist("MESSAGE_SRC", "List of Pathname")
	acl("MESSAGE_SUBST", "List of ShellWord", "c:a,m:a,o:a")
	pkg("META_PACKAGE", "Yes")
	sys("MISSING_FEATURES", "List of Identifier")
	acl("MYSQL_VERSIONS_ACCEPTED", "List of { 51 55 56 }", "m:s")
	usr("MYSQL_VERSION_DEFAULT", "Version")
	sys("NM", "ShellCommand")
	sys("NONBINMODE", "FileMode")
	pkg("NOT_FOR_COMPILER", "List of { ccache ccc clang distcc f2c gcc hp icc ido mipspro mipspro-ucode pcc sunpro xlc }")
	pkglist("NOT_FOR_PLATFORM", "InternalList of PlatformTriple")
	pkg("NOT_FOR_UNPRIVILEGED", "YesNo")
	acl("NO_BIN_ON_CDROM", "Restricted", "m:s,c:s")
	acl("NO_BIN_ON_FTP", "Restricted", "m:s,c:s")
	acl("NO_BUILD", "Yes", "m:s,c:s,Makefile.*:ds")
	pkg("NO_CHECKSUM", "Yes")
	pkg("NO_CONFIGURE", "Yes")
	acl("NO_EXPORT_CPP", "Yes", "m:s")
	pkg("NO_EXTRACT", "Yes")
	pkg("NO_INSTALL_MANPAGES", "Yes")
	// ^^ only has an effect for Imake packages.
	acl("NO_PKGTOOLS_REQD_CHECK", "Yes", "m:s")
	acl("NO_SRC_ON_CDROM", "Restricted", "m:s,c:s")
	acl("NO_SRC_ON_FTP", "Restricted", "m:s,c:s")
	pkglist("ONLY_FOR_COMPILER", "List of { ccc clang gcc hp icc ido mipspro mipspro-ucode pcc sunpro xlc }")
	pkglist("ONLY_FOR_PLATFORM", "InternalList of PlatformTriple")
	pkg("ONLY_FOR_UNPRIVILEGED", "YesNo")
	sys("OPSYS", "Identifier")
	acl("OPSYSVARS", "List of Varname", "m:a,c:a")
	acl("OSVERSION_SPECIFIC", "Yes", "m:s,c:s")
	sys("OS_VERSION", "Version")
	pkg("OVERRIDE_DIRDEPTH*", "Integer")
	pkg("OVERRIDE_GNU_CONFIG_SCRIPTS", "Yes")
	acl("OWNER", "Mail_Address", "m:s,c:d")
	pkglist("OWN_DIRS", "List of Pathname")
	pkglist("OWN_DIRS_PERMS", "List of ShellWord")
	sys("PAMBASE", "Pathname")
	usr("PAM_DEFAULT", "{ linux-pam openpam solaris-pam }")
	acl("PATCHDIR", "RelativePkgPath", "m:s,c:ds")
	pkglist("PATCHFILES", "List of Filename")
	acl("PATCH_ARGS", "List of ShellWord")
	acl("PATCH_DIST_ARGS", "List of ShellWord", "m:as")
	acl("PATCH_DIST_CAT", "ShellCommand")
	acl("PATCH_DIST_STRIP*", "ShellWord", "m:s, c:s, b:, builtin.mk:, *.mk:s")
	acl("PATCH_SITES", "List of URL", "m:s,o:s,c:s")
	acl("PATCH_STRIP", "ShellWord")
	pkg("PERL5_USE_PACKLIST", "YesNo")
	acl("PERL5_PACKLIST", "List of Perl5Packlist", "m:s,o:sa")
	acl("PERL5_PACKLIST_DIR", "Pathname", "")
	sys("PGSQL_PREFIX", "Pathname")
	acl("PGSQL_VERSIONS_ACCEPTED", "List of { 82 83 84 90 91 }")
	usr("PGSQL_VERSION_DEFAULT", "Version")
	sys("PG_LIB_EXT", "{ dylib so }")
	sys("PGSQL_TYPE", "{ postgresql81-client postgresql80-client }")
	sys("PGPKGSRCDIR", "Pathname")
	sys("PHASE_MSG", "ShellCommand")
	usr("PHP_VERSION_REQD", "Version")
	sys("PKGBASE", "Identifier")
	acl("PKGCONFIG_OVERRIDE", "List of Pathmask", "m:as,c:a")
	pkg("PKGCONFIG_OVERRIDE_STAGE", "Stage")
	pkg("PKGDIR", "RelativePkgDir")
	sys("PKGDIRMODE", "FileMode")
	sys("PKGLOCALEDIR", "Pathname")
	pkg("PKGNAME", "PkgName")
	sys("PKGNAME_NOREV", "PkgName")
	sys("PKGPATH", "Pathname")
	acl("PKGREPOSITORY", "Unchecked", "")
	acl("PKGREVISION", "PkgRevision", "m:s")
	sys("PKGSRCDIR", "Pathname")
	acl("PKGSRCTOP", "Yes", "m:s")
	acl("PKGTOOLS_ENV", "List of ShellWord")
	sys("PKGVERSION", "Version")
	sys("PKGWILDCARD", "Filemask")
	sys("PKG_ADMIN", "ShellCommand")
	sys("PKG_APACHE", "{ apache22 apache24 }")
	pkg("PKG_APACHE_ACCEPTED", "List of { apache22 apache24 }")
	usr("PKG_APACHE_DEFAULT", "{ apache22 apache24 }")
	usr("PKG_CONFIG", "Yes")
	// ^^ No, this is not the popular command from GNOME, but the setting
	// whether the pkgsrc user wants configuration files automatically
	// installed or not.
	sys("PKG_CREATE", "ShellCommand")
	sys("PKG_DBDIR", "Pathname")
	cmdline("PKG_DEBUG_LEVEL", "Integer")
	usr("PKG_DEFAULT_OPTIONS", "List of Option")
	sys("PKG_DELETE", "ShellCommand")
	acl("PKG_DESTDIR_SUPPORT", "List of { destdir user-destdir }", "m:s,c:s")
	pkglist("PKG_FAIL_REASON", "List of ShellWord")
	acl("PKG_GECOS.*", "Message", "m:s")
	acl("PKG_GID.*", "Integer", "m:s")
	acl("PKG_GROUPS", "List of ShellWord", "m:as")
	pkglist("PKG_GROUPS_VARS", "List of Varname")
	acl("PKG_HOME.*", "Pathname", "m:s")
	acl("PKG_HACKS", "List of Identifier", "h:a")
	sys("PKG_INFO", "ShellCommand")
	sys("PKG_JAVA_HOME", "Pathname")
	jvms := "{ blackdown-jdk13 jdk jdk14 kaffe run-jdk13 sun-jdk14 sun-jdk15 sun-jdk6 openjdk7 openjdk7-bin sun-jdk7}"
	sys("PKG_JVM", jvms)
	acl("PKG_JVMS_ACCEPTED", "List of "+jvms, "m:s,c:ds")
	usr("PKG_JVM_DEFAULT", jvms)
	acl("PKG_LEGACY_OPTIONS", "List of Option")
	acl("PKG_LIBTOOL", "Pathname", "m:s")
	acl("PKG_OPTIONS", "InternalList of Option", "bsd.options.mk:s,*:pu")
	usr("PKG_OPTIONS.*", "InternalList of Option")
	acl("PKG_OPTIONS_DEPRECATED_WARNINGS", "List of ShellWord")
	acl("PKG_OPTIONS_GROUP.*", "InternalList of Option", "o:s,m:s")
	acl("PKG_OPTIONS_LEGACY_OPTS", "InternalList of Unchecked", "m:a,c:a,o:a")
	acl("PKG_OPTIONS_LEGACY_VARS", "InternalList of Unchecked", "m:a,c:a,o:a")
	acl("PKG_OPTIONS_NONEMPTY_SETS", "InternalList of Identifier")
	acl("PKG_OPTIONS_OPTIONAL_GROUPS", "InternalList of Identifier", "o:as")
	acl("PKG_OPTIONS_REQUIRED_GROUPS", "InternalList of Identifier", "o:s,m:s")
	acl("PKG_OPTIONS_SET.*", "InternalList of Option")
	acl("PKG_OPTIONS_VAR", "PkgOptionsVar", "o:s,m:s,c:s, bsd.options.mk:p")
	acl("PKG_PRESERVE", "Yes", "m:s")
	acl("PKG_SHELL", "Pathname", "m:s,c:s")
	acl("PKG_SHELL.*", "Pathname", "m:s,c:s")
	acl("PKG_SHLIBTOOL", "Pathname")
	pkglist("PKG_SKIP_REASON", "List of ShellWord")
	acl("PKG_SUGGESTED_OPTIONS", "List of Option", "o:as,m:as,c:s")
	acl("PKG_SUPPORTED_OPTIONS", "List of Option", "o:as,m:as,c:s")
	pkg("PKG_SYSCONFDIR*", "Pathname")
	pkglist("PKG_SYSCONFDIR_PERMS", "List of ShellWord")
	sys("PKG_SYSCONFBASEDIR", "Pathname")
	pkg("PKG_SYSCONFSUBDIR", "Pathname")
	acl("PKG_SYSCONFVAR", "Identifier")
	// ^^ FIXME: name/type mismatch.")
	acl("PKG_UID", "Integer", "m:s")
	acl("PKG_USERS", "List of ShellWord", "m:as")
	pkg("PKG_USERS_VARS", "List of Varname")
	acl("PKG_USE_KERBEROS", "Yes", "m:s,c:s")
	//PLIST.*", "# has special handling code")
	pkglist("PLIST_VARS", "List of Identifier")
	pkglist("PLIST_SRC", "List of RelativePkgPath")
	pkglist("PLIST_SUBST", "List of ShellWord")
	acl("PLIST_TYPE", "{ dynamic static }")
	acl("PREPEND_PATH", "List of Pathname")
	acl("PREFIX", "Pathname", "*:u")
	acl("PREV_PKGPATH", "Pathname", "*:u") // doesn't exist any longer
	acl("PRINT_PLIST_AWK", "AwkCommand", "*:a")
	acl("PRIVILEGED_STAGES", "List of { install package clean }")
	acl("PTHREAD_AUTO_VARS", "YesNo", "m:s")
	sys("PTHREAD_CFLAGS", "List of CFlag")
	sys("PTHREAD_LDFLAGS", "List of LdFlag")
	sys("PTHREAD_LIBS", "List of LdFlag")
	acl("PTHREAD_OPTS", "List of { native optional require }", "m:as,c:a,b:a")
	sys("PTHREAD_TYPE", "Identifier")
	// ^^ or "native" or "none".
	pkg("PY_PATCHPLIST", "Yes")
	acl("PYPKGPREFIX", "{ py27 py33 py34 }", "*:pu, pyversion.mk:s, *:")
	pkg("PYTHON_FOR_BUILD_ONLY", "Yes")
	pkglist("REPLACE_PYTHON", "List of Pathmask")
	pkg("PYTHON_VERSIONS_ACCEPTED", "List of Version")
	pkg("PYTHON_VERSIONS_INCOMPATIBLE", "List of Version")
	usr("PYTHON_VERSION_DEFAULT", "Version")
	usr("PYTHON_VERSION_REQD", "Version")
	pkglist("PYTHON_VERSIONED_DEPENDENCIES", "List of PythonDependency")
	sys("RANLIB", "ShellCommand")
	pkglist("RCD_SCRIPTS", "List of Filename")
	acl("RCD_SCRIPT_SRC.*", "List of Pathname", "m:s")
	acl("REPLACE.*", "String", "m:s")
	pkglist("REPLACE_AWK", "List of Pathmask")
	pkglist("REPLACE_BASH", "List of Pathmask")
	pkglist("REPLACE_CSH", "List of Pathmask")
	acl("REPLACE_EMACS", "List of Pathmask")
	acl("REPLACE_FILES.*", "List of Pathmask", "m:as,c:as")
	acl("REPLACE_INTERPRETER", "List of Identifier", "m:a,c:a")
	pkglist("REPLACE_KSH", "List of Pathmask")
	pkglist("REPLACE_LOCALEDIR_PATTERNS", "List of Filemask")
	pkglist("REPLACE_LUA", "List of Pathmask")
	pkglist("REPLACE_PERL", "List of Pathmask")
	pkglist("REPLACE_PYTHON", "List of Pathmask")
	pkglist("REPLACE_SH", "List of Pathmask")
	pkglist("REQD_DIRS", "List of Pathname")
	pkglist("REQD_DIRS_PERMS", "List of ShellWord")
	pkglist("REQD_FILES", "List of Pathname")
	pkg("REQD_FILES_MODE", "{ 0644 0640 0600 0400 }")
	pkglist("REQD_FILES_PERMS", "List of ShellWord")
	pkg("RESTRICTED", "Message")
	usr("ROOT_USER", "UserGroupName")
	usr("ROOT_GROUP", "UserGroupName")
	usr("RUBY_VERSION_REQD", "Version")
	sys("RUN", "ShellCommand")
	acl("SCRIPTS_ENV", "List of ShellWord", "m:a,c:a")
	usr("SETUID_ROOT_PERMS", "List of ShellWord")
	sys("SHAREGRP", "UserGroupName")
	sys("SHAREMODE", "FileMode")
	sys("SHAREOWN", "UserGroupName")
	sys("SHCOMMENT", "ShellCommand")
	acl("SHLIB_HANDLING", "{ YES NO no }")
	acl("SHLIBTOOL", "ShellCommand", "")
	acl("SHLIBTOOL_OVERRIDE", "List of Pathmask", "m:as,c:a")
	acl("SITES.*", "List of FetchURL", "m:asu,c:asu,o:asu")
	pkglist("SPECIAL_PERMS", "List of ShellWord")
	sys("STEP_MSG", "ShellCommand")
	acl("SUBDIR", "List of Filename", "Makefile:a,*:")
	acl("SUBST_CLASSES", "List of Identifier", "m:a,c:a,h:a,Makefile.*:a")
	acl("SUBST_FILES.*", "List of Pathmask", "m:as,c:as,h:as,o:as,Makefile.*:as")
	acl("SUBST_FILTER_CMD.*", "ShellCommand", "m:s,c:s,h:s,o:s,Makefile.*:s")
	acl("SUBST_MESSAGE.*", "Message", "m:s,c:s,h:s,o:s,Makefile.*:s")
	acl("SUBST_SED.*", "SedCommands", "m:as,c:as,h:as,o:as,Makefile.*:as")
	pkg("SUBST_STAGE.*", "Stage")
	pkglist("SUBST_VARS.*", "List of Varname")
	pkglist("SUPERSEDES", "InternalList of Dependency")
	pkglist("TEST_DIRS", "List of WrksrcSubdirectory")
	pkglist("TEST_ENV", "List of ShellWord")
	acl("TEST_TARGET", "List of Identifier", "m:s,c:ds,o:as")
	acl("TEX_ACCEPTED", "List of { teTeX1 teTeX2 teTeX3 }", "m:s,c:s")
	acl("TEX_DEPMETHOD", "{ build run }", "m:s,c:s")
	pkglist("TEXINFO_REQD", "List of Version")
	acl("TOOL_DEPENDS", "InternalList of DependencyWithPath", "c:a,m:a,o:a,*.mk:a")
	sys("TOOLS_ALIASES", "List of Filename")
	sys("TOOLS_BROKEN", "List of Tool")
	sys("TOOLS_CREATE", "List of Tool")
	sys("TOOLS_DEPENDS.*", "InternalList of DependencyWithPath")
	sys("TOOLS_GNU_MISSING", "List of Tool")
	sys("TOOLS_NOOP", "List of Tool")
	sys("TOOLS_PATH.*", "Pathname")
	sys("TOOLS_PLATFORM.*", "ShellCommand")
	sys("TOUCH_FLAGS", "List of ShellWord")
	pkglist("UAC_REQD_EXECS", "List of PrefixPathname")
	acl("UNLIMIT_RESOURCES", "List of { datasize stacksize memorysize }", "m:as,c:a")
	usr("UNPRIVILEGED_USER", "UserGroupName")
	usr("UNPRIVILEGED_GROUP", "UserGroupName")
	pkglist("UNWRAP_FILES", "List of Pathmask")
	usr("UPDATE_TARGET", "List of Identifier")
	pkg("USE_BSD_MAKEFILE", "Yes")
	acl("USE_BUILTIN.*", "YesNo_Indirectly", "builtin.mk:s")
	pkg("USE_CMAKE", "Yes")
	acl("USE_CROSSBASE", "Yes", "m:s")
	pkg("USE_FEATURES", "List of Identifier")
	pkg("USE_GCC_RUNTIME", "YesNo")
	pkg("USE_GNU_CONFIGURE_HOST", "YesNo")
	acl("USE_GNU_ICONV", "Yes", "m:s,c:s,o:s")
	acl("USE_IMAKE", "Yes", "m:s")
	pkg("USE_JAVA", "{ run yes build }")
	pkg("USE_JAVA2", "{ YES yes no 1.4 1.5 6 7 8 }")
	acl("USE_LANGUAGES", "List of { ada c c99 c++ fortran fortran77 java objc }", "m:s,c:s,o:s")
	pkg("USE_LIBTOOL", "Yes")
	pkg("USE_MAKEINFO", "Yes")
	pkg("USE_MSGFMT_PLURALS", "Yes")
	pkg("USE_NCURSES", "Yes")
	pkg("USE_OLD_DES_API", "YesNo")
	pkg("USE_PKGINSTALL", "Yes")
	pkg("USE_PKGLOCALEDIR", "YesNo")
	usr("USE_PKGSRC_GCC", "Yes")
	acl("USE_TOOLS", "List of Tool", "*:a")
	pkg("USE_X11", "Yes")
	sys("WARNING_MSG", "ShellCommand")
	sys("WARNING_CAT", "ShellCommand")
	acl("WRAPPER_REORDER_CMDS", "List of WrapperReorder", "b:a,c:a,m:a")
	acl("WRAPPER_TRANSFORM_CMDS", "List of WrapperTransform", "b:a,c:a,m:a")
	sys("WRKDIR", "Pathname")
	pkg("WRKSRC", "WrkdirSubdirectory")
	sys("X11_PKGSRCDIR.*", "Pathname")
	usr("XAW_TYPE", "{ 3d neXtaw standard xpm }")
	acl("XMKMF_FLAGS", "List of ShellWord")
}
